<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="d7/d06/classFunctionNode">
<title>FunctionNode class Reference</title>
<para>
    <programlisting>#include <link linkend="d8/d5c/functions_8h">&lt;functions.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for FunctionNode</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../d6/d84/classFunctionNode__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for FunctionNode</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="../../de/d88/classFunctionNode__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ExpressionNode * expression</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="d7/d06/classFunctionNode_1a41cb7db0162ffbec0902bd8ff7ea435f">FunctionNode</link> (
<link linkend="dd/d06/classExpressionNode">ExpressionNode</link> * expression)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="d7/d06/classFunctionNode_1a24ca76ed6585311b7ee49534f11dbc78">~FunctionNode</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="d7/d06/classFunctionNode_1a410288c74db880d2d3bffadc393d9ede">GetPrecedence</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>char * <link linkend="d7/d06/classFunctionNode_1a86b42caf0a4019d8f594dc994bb094e7">GetText</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="d8/d5d/classSyntaxNode">SyntaxNode</link> * <link linkend="d7/d06/classFunctionNode_1a8f6d3631e6b06af048a87463f34f0b8e">GetNext</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d7/d06/classFunctionNode_1aec646af849e98f7aee604398dccf1385">Attach</link> (
<link linkend="d8/d5d/classSyntaxNode">SyntaxNode</link> * node)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d7/d06/classFunctionNode_1a3af90509cddcec47bdf454665c622412">Detach</link> (
<link linkend="d8/d5d/classSyntaxNode">SyntaxNode</link> * node)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="d7/d06/classFunctionNode_1a951101d50e4b4428871986923d5657d8">Replace</link> (
<link linkend="d8/d5d/classSyntaxNode">SyntaxNode</link> * n, <link linkend="d8/d5d/classSyntaxNode">SyntaxNode</link> * x)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Represents a mathematical function in a syntax tree. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Function nodes in syntax trees can both be well known functions like cosine (cos) and also user defined functions. The function node represents a function call and not a function definition.</para>

<para>A formal description of mathematical functions can be found at Wikipedia: <link xlink:href="http://en.wikipedia.org/wiki/Function_(mathematics)">http://en.wikipedia.org/wiki/Function_(mathematics)</link></para>

<para>When instantiating a function node an argument must be supplied. The argument is a pointer to an expression node representing the value which should be used when computing the function value. </para>
                <para>Definition at line 55 of file functions.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>functions.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="d7/d06/classFunctionNode_1a41cb7db0162ffbec0902bd8ff7ea435f">
                <title>FunctionNode::FunctionNode (ExpressionNode *expression)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a24ca76ed6585311b7ee49534f11dbc78">
                <title>FunctionNode::~FunctionNode ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a410288c74db880d2d3bffadc393d9ede">
                <title>int FunctionNode::GetPrecedence ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a86b42caf0a4019d8f594dc994bb094e7">
                <title>char * FunctionNode::GetText ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a8f6d3631e6b06af048a87463f34f0b8e">
                <title>SyntaxNode * FunctionNode::GetNext ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1aec646af849e98f7aee604398dccf1385">
                <title>void FunctionNode::Attach (SyntaxNode *node)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a3af90509cddcec47bdf454665c622412">
                <title>void FunctionNode::Detach (SyntaxNode *node)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="d7/d06/classFunctionNode_1a951101d50e4b4428871986923d5657d8">
                <title>void FunctionNode::Replace (SyntaxNode *n, SyntaxNode *x)</title> <emphasis></emphasis>
                
            </section>
</section>
