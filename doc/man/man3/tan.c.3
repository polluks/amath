.TH "lib/real/tan.c" 3 "Tue Jan 24 2017" "Version 1.6.2" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/tan.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBtan\fP (double x)"
.br
.RI "\fITrigonometric tangent function\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "double tan (double x)"

.PP
Trigonometric tangent function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Return tangent function of x\&.
.fi
.PP
.PP
.PP
.nf
kernel function:
 __kernel_tan       \&.\&.\&. tangent function on [-pi/4,pi/4]
 __rem_pio2     \&.\&.\&. argument reduction routine
.fi
.PP
.PP
.PP
.nf
Method\&.
     Let S,C and T denote the sin, cos and tan respectively on
 [-PI/4, +PI/4]\&. Reduce the argument x to y1+y2 = x-k*pi/2
 in [-pi/4 , +pi/4], and let n = k mod 4\&.
 We have
.fi
.PP
.PP
.PP
.nf
         n        sin(x)      cos(x)        tan(x)
    ----------------------------------------------------------
     0         S       C         T
     1         C      -S        -1/T
     2        -S      -C         T
     3        -C       S        -1/T
    ----------------------------------------------------------
.fi
.PP
.PP
.PP
.nf
Special cases:
     Let trig be any of sin, cos, or tan\&.
     trig(+-INF)  is NaN, with signals;
     trig(NaN)    is that NaN;
.fi
.PP
.PP
.PP
.nf
Accuracy:
 TRIG(x) returns trig(x) nearly rounded
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 86 of file tan\&.c\&.
.PP
References __kernel_tan(), and rempio2()\&.
.PP
Referenced by RealNumber::Cotangent(), and RealNumber::Tangent()\&.
.PP
.nf
87 {
88     double y[2],z=0\&.0;
89     sword n, ix;
90 
91     /* High word of x\&. */
92     GET_HIGH_WORD(ix,x);
93 
94     /* |x| ~< pi/4 */
95     ix &= 0x7fffffff;
96     if(ix <= 0x3fe921fb) return __kernel_tan(x,z,1);
97 
98     /* tan(Inf or NaN) is NaN */
99     else if (ix>=0x7ff00000) return x-x;        /* NaN */
100 
101     /* argument reduction needed */
102     else {
103         n = rempio2(x,y);
104         return __kernel_tan(y[0],y[1],1-((n&1)<<1)); /*  1 -- n even
105                             -1 -- n odd */
106     }
107 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
