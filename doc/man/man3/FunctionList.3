.TH "FunctionList" 3 "Tue Jan 24 2017" "Version 1.6.2" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunctionList \- A list of user defined functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <functions\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFunctionList\fP ()"
.br
.ti -1c
.RI "\fB~FunctionList\fP ()"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBDelete\fP (const char *name, const char *argument)"
.br
.ti -1c
.RI "\fBbool\fP \fBIsSystemFunction\fP (const char *name)"
.br
.ti -1c
.RI "\fBUserFunction\fP * \fBGetFirstFunction\fP ()"
.br
.ti -1c
.RI "\fBUserFunction\fP * \fBGetFunctionDef\fP (const char *name)"
.br
.ti -1c
.RI "\fBUserFunction\fP * \fBGetFunctionDef\fP (const char *name, const char *argument)"
.br
.ti -1c
.RI "\fBFunctionNode\fP * \fBGetFunctionCall\fP (const char *function, \fBExpressionNode\fP *value)"
.br
.ti -1c
.RI "char * \fBList\fP ()"
.br
.ti -1c
.RI "char * \fBListDefinitions\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "char * \fBListContent\fP (\fBbool\fP cmdFormat)"
.br
.ti -1c
.RI "\fBfunctiondef\fP * \fBGetSystemFunction\fP (const char *ident)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCharBuffer\fP * \fBbuf\fP"
.br
.ti -1c
.RI "\fBUserFunction\fP * \fBfirst\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A list of user defined functions\&. 
.PP
Definition at line 78 of file functions\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FunctionList::FunctionList ()"

.PP
Definition at line 279 of file functions\&.cpp\&.
.PP
References buf, CharBuffer::CharBuffer(), and first\&.
.PP
Referenced by Program::Program()\&.
.PP
.nf
280 {
281     first = NOMEM;
282     buf = new CharBuffer();
283 }
.fi
.SS "FunctionList::~FunctionList ()"

.PP
Definition at line 285 of file functions\&.cpp\&.
.PP
References buf, and first\&.
.PP
.nf
286 {
287     if (first != NOMEM) {
288         delete first;
289     }
290 
291     delete buf;
292 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void FunctionList::Clear ()"

.PP
Definition at line 294 of file functions\&.cpp\&.
.PP
References buf, CharBuffer::ClearBuffer(), and first\&.
.PP
Referenced by DeleteStatement::Execute()\&.
.PP
.nf
295 {
296     if (first != NOMEM) {
297         delete first;
298         first = NOMEM;
299     }
300 
301     buf->ClearBuffer();
302 }
.fi
.SS "\fBbool\fP FunctionList::Delete (const char * name, const char * argument)"

.PP
Definition at line 304 of file functions\&.cpp\&.
.PP
References UserFunction::chainDelete, first, Variable::GetName(), UserFunction::GetName(), UserFunction::GetVariable(), UserFunction::Next, and StrIsEqual()\&.
.PP
Referenced by DeleteStatement::Execute()\&.
.PP
.nf
305 {
306     if (first == NOMEM)
307     {
308         return false;
309     }
310 
311     if (first != NOMEM && StrIsEqual(first->GetName(), name) && StrIsEqual(first->GetVariable()->GetName(), argument)) {
312         UserFunction *func = first;
313         first = first->Next;
314         func->chainDelete = false;
315         delete func;
316         return true;
317     }
318 
319     UserFunction *current = first->Next;
320     UserFunction *last = first;
321 
322     while (current != NOMEM && !StrIsEqual(current->GetName(), name)) {
323         current = current->Next;
324         last = last->Next;
325     }
326 
327     if (current == NOMEM) {
328         return false;
329     } else if (!StrIsEqual(current->GetVariable()->GetName(), argument)) {
330         return false;
331     }
332 
333     last->Next = current->Next;
334 
335     // Only delete this variable\&. Not the whole chain\&.
336     current->chainDelete = false;
337     delete current;
338 
339     return true;
340 }
.fi
.SS "\fBUserFunction\fP * FunctionList::GetFirstFunction ()"

.PP
Definition at line 342 of file functions\&.cpp\&.
.PP
References first\&.
.PP
.nf
343 {
344     return first;
345 }
.fi
.SS "\fBFunctionNode\fP * FunctionList::GetFunctionCall (const char * function, \fBExpressionNode\fP * value)"

.PP
Definition at line 388 of file functions\&.cpp\&.
.PP
References functiondef::create, first, UserFunction::GetName(), GetSystemFunction(), UserFunction::Next, StrIsEqual(), and UserFunctionNode::UserFunctionNode()\&.
.PP
Referenced by Parser::ParseIdent()\&.
.PP
.nf
389 {
390     const functiondef *systemFunction = GetSystemFunction(function);
391     if (systemFunction != NOMEM) {
392         return (systemFunction->create)(parameter);
393     }
394 
395     UserFunction *current = first;
396     while (current != NOMEM && !StrIsEqual(current->GetName(), function)) {
397         current = current->Next;
398     }
399 
400     if (current != NOMEM) {
401         return new UserFunctionNode(current, parameter);
402     }
403 
404     return NOMEM;
405 }
.fi
.SS "\fBUserFunction\fP * FunctionList::GetFunctionDef (const char * name)"

.PP
Definition at line 347 of file functions\&.cpp\&.
.PP
References first, UserFunction::GetName(), UserFunction::Next, StrIsEqual(), and UserFunction::UserFunction()\&.
.PP
Referenced by Parser::ParseFunctionDef()\&.
.PP
.nf
348 {
349     // Search the list for function definition\&. If function not found then create a new definition\&.
350     if (first == NOMEM) {
351         first = new UserFunction(name);
352         return first;
353     }
354 
355     UserFunction *current = first;
356     UserFunction *last = NOMEM;
357 
358     while (current != NOMEM) {
359         if (StrIsEqual(current->GetName(), name)) {
360             return current;
361         }
362 
363         last = current;
364         current = current->Next;
365     }
366 
367     current = new UserFunction(name);
368     last->Next = current;
369 
370     return current;
371 }
.fi
.SS "\fBUserFunction\fP * FunctionList::GetFunctionDef (const char * name, const char * argument)"

.PP
Definition at line 373 of file functions\&.cpp\&.
.PP
References first, Variable::GetName(), UserFunction::GetName(), UserFunction::GetVariable(), UserFunction::Next, and StrIsEqual()\&.
.PP
Referenced by PlotStatement::Execute(), and DrawStatement::Execute()\&.
.PP
.nf
374 {
375     UserFunction *current = first;
376 
377     while (current != NOMEM) {
378         if (StrIsEqual(current->GetName(), name) && StrIsEqual(current->GetVariable()->GetName(), argument)) {
379             return current;
380         }
381 
382         current = current->Next;
383     }
384 
385     return NOMEM;
386 }
.fi
.SS "\fBfunctiondef\fP * FunctionList::GetSystemFunction (const char * ident)\fC [private]\fP"

.PP
Definition at line 463 of file functions\&.cpp\&.
.PP
References functiondefs, functiondef::name, and StrIsEqual()\&.
.PP
Referenced by GetFunctionCall(), and IsSystemFunction()\&.
.PP
.nf
464 {
465     static const unsigned int count = sizeof(functiondefs) / sizeof(functiondef);
466     for (unsigned int i = 0; i < count; i++) {
467         if (StrIsEqual(functiondefs[i]\&.name, ident)) {
468             return (functiondef*)&functiondefs[i];
469         }
470     }
471 
472     return NOMEM;
473 }
.fi
.SS "\fBbool\fP FunctionList::IsSystemFunction (const char * name)"

.PP
Definition at line 458 of file functions\&.cpp\&.
.PP
References GetSystemFunction()\&.
.PP
Referenced by Parser::ParseFunctionDef()\&.
.PP
.nf
459 {
460     return (GetSystemFunction(name) != NOMEM);
461 }
.fi
.SS "char * FunctionList::List ()"

.PP
Definition at line 407 of file functions\&.cpp\&.
.PP
References ListContent()\&.
.PP
Referenced by ListFunctionsStatement::Execute()\&.
.PP
.nf
408 {
409     return ListContent(false);
410 }
.fi
.SS "char * FunctionList::ListContent (\fBbool\fP cmdFormat)\fC [private]\fP"

.PP
Definition at line 417 of file functions\&.cpp\&.
.PP
References CharBuffer::Append(), buf, CharBuffer::Empty(), CharBuffer::EnsureSize(), first, UserFunction::GetExpression(), Variable::GetName(), UserFunction::GetName(), CharBuffer::GetString(), ExpressionNode::GetText(), UserFunction::GetVariable(), UserFunction::Next, and StrLen()\&.
.PP
Referenced by List(), and ListDefinitions()\&.
.PP
.nf
418 {
419     if (first == NOMEM) {
420         return (char*)(cmdFormat ? NOMEM : HELPFUNCNDEF);
421     }
422 
423     int len = 0;
424     UserFunction *current = first;
425 
426     while (current != NOMEM) {
427         len += StrLen(current->GetName());
428         len += 1;
429         len += StrLen(current->GetVariable()->GetName());
430         len += 2;
431         len += StrLen(current->GetExpression()->GetText());
432         len += cmdFormat ? 2 : 1;
433         current = current->Next;
434     }
435 
436     buf->Empty();
437     buf->EnsureSize(len + StrLen(NEWLINE) + 1);
438 
439     current = first;
440     while (current != NOMEM) {
441         buf->Append(current->GetName());
442         buf->Append("(");
443         buf->Append(current->GetVariable()->GetName());
444         buf->Append(")=");
445         buf->Append(current->GetExpression()->GetText());
446 
447         if (cmdFormat) {
448             buf->Append(';');
449         }
450 
451         buf->Append(NEWLINE);
452         current = current->Next;
453     }
454 
455     return buf->GetString();
456 }
.fi
.SS "char * FunctionList::ListDefinitions ()"

.PP
Definition at line 412 of file functions\&.cpp\&.
.PP
References ListContent()\&.
.PP
Referenced by SaveStatement::Execute()\&.
.PP
.nf
413 {
414     return ListContent(true);
415 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBCharBuffer\fP* FunctionList::buf\fC [private]\fP"

.PP
Definition at line 96 of file functions\&.h\&.
.PP
Referenced by Clear(), FunctionList(), ListContent(), and ~FunctionList()\&.
.SS "\fBUserFunction\fP* FunctionList::first\fC [private]\fP"

.PP
Definition at line 97 of file functions\&.h\&.
.PP
Referenced by Clear(), Delete(), FunctionList(), GetFirstFunction(), GetFunctionCall(), GetFunctionDef(), ListContent(), and ~FunctionList()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
