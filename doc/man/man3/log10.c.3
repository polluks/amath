.TH "lib/real/log10.c" 3 "Fri Jan 20 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/log10.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBlog10\fP (double x)"
.br
.RI "\fIBase 10 logarithm function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBtwo54\fP = 1\&.80143985094819840000e+16"
.br
.ti -1c
.RI "static const double \fBivln10\fP = 4\&.34294481903251816668e\-01"
.br
.ti -1c
.RI "static const double \fBlog10_2hi\fP = 3\&.01029995663611771306e\-01"
.br
.ti -1c
.RI "static const double \fBlog10_2lo\fP = 3\&.69423907715893078616e\-13"
.br
.ti -1c
.RI "static double \fBzero\fP = 0\&.0"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double log10 (double x)"

.PP
Base 10 logarithm function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Method :
 Let log10_2hi = leading 40 bits of log10(2) and
     log10_2lo = log10(2) - log10_2hi,
     ivln10   = 1/log(10) rounded\&.
 Then
    n = ilogb(x),
    if(n<0)  n = n+1;
    x = scalbn(x,-n);
    log10(x) := n*log10_2hi + (n*log10_2lo + ivln10*log(x))
.fi
.PP
.PP
.PP
.nf
Note 1:
 To guarantee log10(10**n)=n, where 10**n is normal, the rounding
 mode must set to Round-to-Nearest\&.
Note 2:
 [1/log(10)] rounded to 53 bits has error  \&.198   ulps;
 log10 is monotonic at all binary break points\&.
.fi
.PP
.PP
.PP
.nf
Special cases:
 log10(x) is NaN with signal if x < 0;
 log10(+INF) is +INF with no signal; log10(0) is -INF with signal;
 log10(NaN) is that NaN with no signal;
 log10(10**N) = N  for N=0,1,\&.\&.\&.,22\&.
.fi
.PP
.PP
.PP
.nf
Constants:
The hexadecimal values are the intended ones for the following constants\&.
The decimal values may be used, provided that the compiler will convert
from decimal to binary accurately enough to produce the hexadecimal values
shown\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 95 of file log10\&.c\&.
.PP
References ivln10, log10_2hi, log10_2lo, two54, and zero\&.
.PP
Referenced by DecimalSystem::GetRealText(), and RealNumber::Log10()\&.
.PP
.nf
96 {
97     double y,z;
98     sword i,k,hx;
99     uword lx;
100 
101     EXTRACT_WORDS(hx,lx,x);
102 
103     k=0;
104     if (hx < 0x00100000) {                  /* x < 2**-1022  */
105         if (((hx&0x7fffffff)|lx)==0)
106             return -two54/zero;             /* log(+-0)=-inf */
107         if (hx<0) return (x-x)/zero;        /* log(-#) = NaN */
108         k -= 54;
109         x *= two54; /* subnormal number, scale up x */
110         GET_HIGH_WORD(hx, x);              /* high word of x */
111     }
112     if (hx >= 0x7ff00000) return x+x;
113     k += (hx>>20)-1023;
114     i  = ((uword)k&0x80000000)>>31;
115     hx = (hx&0x000fffff)|((0x3ff-i)<<20);
116     y  = (double)(k+i);
117     SET_HIGH_WORD(x,hx);
118     z  = y*log10_2lo + ivln10*log(x);
119     return  z+y*log10_2hi;
120 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double ivln10 = 4\&.34294481903251816668e\-01\fC [static]\fP"

.PP
Definition at line 49 of file log10\&.c\&.
.PP
Referenced by log10()\&.
.SS "const double log10_2hi = 3\&.01029995663611771306e\-01\fC [static]\fP"

.PP
Definition at line 50 of file log10\&.c\&.
.PP
Referenced by log10()\&.
.SS "const double log10_2lo = 3\&.69423907715893078616e\-13\fC [static]\fP"

.PP
Definition at line 51 of file log10\&.c\&.
.PP
Referenced by log10()\&.
.SS "const double two54 = 1\&.80143985094819840000e+16\fC [static]\fP"

.PP
Definition at line 48 of file log10\&.c\&.
.PP
Referenced by log10()\&.
.SS "double zero = 0\&.0\fC [static]\fP"

.PP
Definition at line 53 of file log10\&.c\&.
.PP
Referenced by log10()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
