.TH "Language" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Language \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <language\&.h>\fP
.PP
Inherited by \fBAmigaLanguage\fP, \fBPosixLanguage\fP, and \fBStandardLanguage\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLanguage\fP ()"
.br
.ti -1c
.RI "virtual \fB~Language\fP ()"
.br
.ti -1c
.RI "char * \fBGetText\fP (int id)"
.br
.ti -1c
.RI "char * \fBGetHelpText\fP (char *ident)"
.br
.ti -1c
.RI "char * \fBGetHelpText\fP (\fBSymbol\fP symbol)"
.br
.ti -1c
.RI "\fBSymbol\fP \fBFindKeyword\fP (const char *ident)"
.br
.ti -1c
.RI "virtual char \fBGetFractionPoint\fP ()=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsAlNum\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsAlpha\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsDigit\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsPunct\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsSpace\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBCharIsCntrl\fP (unsigned long character)=0"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBStrIsEqualLoc\fP (const char *s1, const char *s2)=0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual char * \fBTranslate\fP (\fBtextdef\fP *def)=0"
.br
.ti -1c
.RI "virtual char * \fBTranslate\fP (\fBhelptextdef\fP *def)=0"
.br
.ti -1c
.RI "virtual char * \fBTranslate\fP (\fBidenthelpdef\fP *def)=0"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBkeyworddef\fP * \fBkeywordsloc\fP"
.br
.ti -1c
.RI "unsigned int \fBkeywordcount\fP"
.br
.ti -1c
.RI "unsigned int \fBtextcount\fP"
.br
.ti -1c
.RI "unsigned int \fBidentcount\fP"
.br
.ti -1c
.RI "unsigned int \fBhelpcount\fP"
.br
.ti -1c
.RI "unsigned int \fBaliascount\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "char * \fBFindAlias\fP (const char *ident)"
.br
.ti -1c
.RI "char * \fBUntagText\fP (const char *text)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fBlastText\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 36 of file language\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Language::Language ()"

.PP
Definition at line 38 of file language\&.cpp\&.
.PP
References aliascount, helpcount, helptexts, identaliases, identcount, identtexts, keywordcount, keywords, keywordsloc, lastText, textcount, and textdefs\&.
.PP
Referenced by PosixLanguage::PosixLanguage(), and StandardLanguage::StandardLanguage()\&.
.PP
.nf
39 {
40     lastText = NOMEM;
41     keywordsloc = NOMEM;
42     keywordcount = sizeof(keywords) / sizeof(keyworddef);
43     textcount = sizeof(textdefs) / sizeof(textdef);
44     identcount = sizeof(identtexts) / sizeof(identhelpdef);
45     helpcount = sizeof(helptexts) / sizeof(helptextdef);
46     aliascount = sizeof(identaliases) / sizeof(identalias);
47 }
.fi
.SS "Language::~Language ()\fC [virtual]\fP"

.PP
Definition at line 49 of file language\&.cpp\&.
.PP
References keywordsloc, and lastText\&.
.PP
.nf
50 {
51     if (lastText != NOMEM) {
52         delete lastText;
53     }
54 
55     if (keywordsloc != NOMEM) {
56         delete [] keywordsloc;
57     }
58 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual \fBbool\fP Language::CharIsAlNum (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.SS "virtual \fBbool\fP Language::CharIsAlpha (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by Lexer::GetLitteral()\&.
.SS "virtual \fBbool\fP Language::CharIsCntrl (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by Lexer::GetQuotedIdent(), and Lexer::ShouldSkip()\&.
.SS "virtual \fBbool\fP Language::CharIsDigit (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by Lexer::GetLitteral()\&.
.SS "virtual \fBbool\fP Language::CharIsPunct (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.SS "virtual \fBbool\fP Language::CharIsSpace (unsigned long character)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by Lexer::GetNextToken(), and Lexer::ShouldSkip()\&.
.SS "char * Language::FindAlias (const char * ident)\fC [private]\fP"

.PP
Definition at line 60 of file language\&.cpp\&.
.PP
References identalias::alias, aliascount, identalias::ident, identaliases, and StrIsEqual()\&.
.PP
Referenced by GetHelpText()\&.
.PP
.nf
61 {
62     for (unsigned int i = 0; i < aliascount; i++) {
63         if (StrIsEqual(identaliases[i]\&.ident, ident)) {
64             return (char*)identaliases[i]\&.alias;
65         }
66     }
67     return (char*)ident;
68 }
.fi
.SS "\fBSymbol\fP Language::FindKeyword (const char * ident)"

.PP
Definition at line 70 of file language\&.cpp\&.
.PP
References keywordcount, keywords, keywordsloc, keyworddef::name, StrIsEqualLoc(), and keyworddef::symbol\&.
.PP
Referenced by Lexer::FindKeyword()\&.
.PP
.nf
71 {
72     for (unsigned int i = 0; i < keywordcount; i++) {
73         if (
74             Program->Language->StrIsEqualLoc(keywords[i]\&.name, ident) ||
75             (keywordsloc != NULL &&
76              Program->Language->StrIsEqualLoc(keywordsloc[i]\&.name, ident))) {
77             return keywords[i]\&.symbol;
78         }
79     }
80     return (Symbol)0;
81 }
.fi
.SS "virtual char Language::GetFractionPoint ()\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by Program::NewPositionalInput(), Program::NewPositionalOutput(), and Program::Program()\&.
.SS "char * Language::GetHelpText (char * ident)"

.PP
Definition at line 102 of file language\&.cpp\&.
.PP
References FindAlias(), identhelpdef::ident, identcount, identtexts, StrIsEqual(), Translate(), and UntagText()\&.
.PP
Referenced by HelpStatement::Execute()\&.
.PP
.nf
103 {
104     char *s = FindAlias(ident);
105     identhelpdef *def = NOMEM;
106     for (unsigned int i = 0; i < identcount; i++) {
107         if (StrIsEqual(identtexts[i]\&.ident, s)) {
108             def = (identhelpdef*)&identtexts[i];
109             break;
110         }
111     }
112 
113     if (def == NOMEM) {
114         return (char*)(HELPNOHELP);
115     }
116 
117     char *text = Translate(def);
118     char *untagged = UntagText(text);
119     return untagged;
120 }
.fi
.SS "char * Language::GetHelpText (\fBSymbol\fP symbol)"

.PP
Definition at line 122 of file language\&.cpp\&.
.PP
References helpcount, helptexts, helptextdef::symbol, Translate(), and UntagText()\&.
.PP
Referenced by HelpStatement::Execute()\&.
.PP
.nf
123 {
124     helptextdef *def = NOMEM;
125     for (unsigned int i = 0; i < helpcount; i++) {
126         if (helptexts[i]\&.symbol == symbol) {
127             def = (helptextdef*)&helptexts[i];
128             break;
129         }
130     }
131 
132     if (def == NOMEM) {
133         return (char*)(HELPNOHELP);
134     }
135 
136     char *text = Translate(def);
137     char *untagged = UntagText(text);
138     return untagged;
139 }
.fi
.SS "char * Language::GetText (int id)"

.PP
Definition at line 83 of file language\&.cpp\&.
.PP
References textdef::id, textcount, textdefs, Translate(), and UntagText()\&.
.PP
.nf
84 {
85     textdef *def = NOMEM;
86     for (unsigned int i = 0; i < textcount; i++) {
87         if (textdefs[i]\&.id == id) {
88             def = (textdef*)&textdefs[i];
89             break;
90         }
91     }
92 
93     if (def == NOMEM) {
94         return (char*)(HELPNOHELP);
95     }
96 
97     char *text = Translate(def);
98     char *untagged = UntagText(text);
99     return untagged;
100 }
.fi
.SS "virtual \fBbool\fP Language::StrIsEqualLoc (const char * s1, const char * s2)\fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by FindKeyword()\&.
.SS "virtual char* Language::Translate (\fBtextdef\fP * def)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by GetText()\&.
.SS "virtual char* Language::Translate (\fBhelptextdef\fP * def)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by GetHelpText()\&.
.SS "virtual char* Language::Translate (\fBidenthelpdef\fP * def)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implemented in \fBPosixLanguage\fP, \fBAmigaLanguage\fP, and \fBStandardLanguage\fP\&.
.PP
Referenced by GetHelpText()\&.
.SS "char * Language::UntagText (const char * text)\fC [private]\fP"

.PP
Definition at line 141 of file language\&.cpp\&.
.PP
References lastText, MemCopy(), StrLen(), texttags, and Untag()\&.
.PP
Referenced by GetHelpText(), and GetText()\&.
.PP
.nf
142 {
143     if (lastText != NOMEM) {
144         delete lastText;
145         lastText = NULL;
146     }
147 
148     if (text == NOMEM) {
149         return NOMEM;
150     }
151 
152     unsigned int count = sizeof(texttags) / sizeof(texttag);
153     char *untagged = new char[StrLen(text) * 2];
154     Untag(untagged, text, (texttag*)texttags, count);
155 
156     unsigned int len = StrLen(untagged) + 1;
157     lastText = new char[len];
158     MemCopy(lastText, untagged, len);
159     delete [] untagged;
160 
161     return lastText;
162 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "unsigned int Language::aliascount\fC [protected]\fP"

.PP
Definition at line 63 of file language\&.h\&.
.PP
Referenced by FindAlias(), and Language()\&.
.SS "unsigned int Language::helpcount\fC [protected]\fP"

.PP
Definition at line 62 of file language\&.h\&.
.PP
Referenced by GetHelpText(), and Language()\&.
.SS "unsigned int Language::identcount\fC [protected]\fP"

.PP
Definition at line 61 of file language\&.h\&.
.PP
Referenced by GetHelpText(), and Language()\&.
.SS "unsigned int Language::keywordcount\fC [protected]\fP"

.PP
Definition at line 59 of file language\&.h\&.
.PP
Referenced by FindKeyword(), and Language()\&.
.SS "\fBkeyworddef\fP* Language::keywordsloc\fC [protected]\fP"

.PP
Definition at line 58 of file language\&.h\&.
.PP
Referenced by FindKeyword(), Language(), and ~Language()\&.
.SS "char* Language::lastText\fC [private]\fP"

.PP
Definition at line 68 of file language\&.h\&.
.PP
Referenced by Language(), UntagText(), and ~Language()\&.
.SS "unsigned int Language::textcount\fC [protected]\fP"

.PP
Definition at line 60 of file language\&.h\&.
.PP
Referenced by GetText(), and Language()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
