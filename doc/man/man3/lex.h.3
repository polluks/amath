.TH "app/localize/lex.h" 3 "Fri Jan 20 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
app/localize/lex.h \- \fBLexer\fP defitions used by other classes\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBoperatordef\fP"
.br
.RI "\fICharacter representation of operator tied with its symbol\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSymbol\fP { \fBsymunknown\fP, \fBsymident\fP, \fBsymqident\fP, \fBsymnumber\fP, \fBsymplus\fP, \fBsymminus\fP, \fBsymtimes\fP, \fBsymslash\fP, \fBsympower\fP, \fBsymabsolute\fP, \fBsymassign\fP, \fBsymlparen\fP, \fBsymrparen\fP, \fBsymfuncsqrt\fP, \fBsymfunccbrt\fP, \fBsymfunclog\fP, \fBsymfuncln\fP, \fBsymhelp\fP, \fBsymeval\fP, \fBsymdelete\fP, \fBsymall\fP, \fBsymclear\fP, \fBsymdef\fP, \fBsymexit\fP, \fBsymoperator\fP, \fBsymstatement\fP, \fBsymfunction\fP, \fBsymvariable\fP, \fBsymtrigon\fP, \fBsymhyper\fP, \fBsymcomplex\fP, \fBsyme\fP, \fBsympi\fP, \fBsymi\fP, \fBsymins\fP, \fBsymdelimiter\fP, \fBsymend\fP, \fBsymshow\fP, \fBsymlist\fP, \fBsymload\fP, \fBsymsave\fP, \fBsymexecute\fP, \fBsyminput\fP, \fBsymoutput\fP, \fBsymdigits\fP, \fBsymdec\fP, \fBsymhex\fP, \fBsymbin\fP, \fBsymoct\fP, \fBsymmem\fP, \fBsymprefs\fP, \fBsymprompt\fP, \fBsymversion\fP, \fBsymplot\fP, \fBsymdraw\fP }
.RI "\fISymbols generated by the \fBLexer\fP\&. \fP""
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fBoperatordef\fP \fBoperators\fP []"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBLexer\fP defitions used by other classes\&. 


.PP
Definition in file \fBlex\&.h\fP\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSymbol\fP"

.PP
Symbols generated by the \fBLexer\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIsymunknown \fP\fP
.TP
\fB\fIsymident \fP\fP
.TP
\fB\fIsymqident \fP\fP
.TP
\fB\fIsymnumber \fP\fP
.TP
\fB\fIsymplus \fP\fP
.TP
\fB\fIsymminus \fP\fP
.TP
\fB\fIsymtimes \fP\fP
.TP
\fB\fIsymslash \fP\fP
.TP
\fB\fIsympower \fP\fP
.TP
\fB\fIsymabsolute \fP\fP
.TP
\fB\fIsymassign \fP\fP
.TP
\fB\fIsymlparen \fP\fP
.TP
\fB\fIsymrparen \fP\fP
.TP
\fB\fIsymfuncsqrt \fP\fP
.TP
\fB\fIsymfunccbrt \fP\fP
.TP
\fB\fIsymfunclog \fP\fP
.TP
\fB\fIsymfuncln \fP\fP
.TP
\fB\fIsymhelp \fP\fP
.TP
\fB\fIsymeval \fP\fP
.TP
\fB\fIsymdelete \fP\fP
.TP
\fB\fIsymall \fP\fP
.TP
\fB\fIsymclear \fP\fP
.TP
\fB\fIsymdef \fP\fP
.TP
\fB\fIsymexit \fP\fP
.TP
\fB\fIsymoperator \fP\fP
.TP
\fB\fIsymstatement \fP\fP
.TP
\fB\fIsymfunction \fP\fP
.TP
\fB\fIsymvariable \fP\fP
.TP
\fB\fIsymtrigon \fP\fP
.TP
\fB\fIsymhyper \fP\fP
.TP
\fB\fIsymcomplex \fP\fP
.TP
\fB\fIsyme \fP\fP
.TP
\fB\fIsympi \fP\fP
.TP
\fB\fIsymi \fP\fP
.TP
\fB\fIsymins \fP\fP
.TP
\fB\fIsymdelimiter \fP\fP
.TP
\fB\fIsymend \fP\fP
.TP
\fB\fIsymshow \fP\fP
.TP
\fB\fIsymlist \fP\fP
.TP
\fB\fIsymload \fP\fP
.TP
\fB\fIsymsave \fP\fP
.TP
\fB\fIsymexecute \fP\fP
.TP
\fB\fIsyminput \fP\fP
.TP
\fB\fIsymoutput \fP\fP
.TP
\fB\fIsymdigits \fP\fP
.TP
\fB\fIsymdec \fP\fP
.TP
\fB\fIsymhex \fP\fP
.TP
\fB\fIsymbin \fP\fP
.TP
\fB\fIsymoct \fP\fP
.TP
\fB\fIsymmem \fP\fP
.TP
\fB\fIsymprefs \fP\fP
.TP
\fB\fIsymprompt \fP\fP
.TP
\fB\fIsymversion \fP\fP
.TP
\fB\fIsymplot \fP\fP
.TP
\fB\fIsymdraw \fP\fP
.PP
Definition at line 40 of file lex\&.h\&.
.PP
.nf
40              {
41     symunknown, symident, symqident, symnumber,
42     symplus, symminus, symtimes, symslash, sympower,
43     symabsolute, symassign, symlparen, symrparen,
44     symfuncsqrt, symfunccbrt, symfunclog, symfuncln,
45     symhelp, symeval, symdelete, symall, symclear, symdef, symexit,
46     symoperator, symstatement, symfunction, symvariable,
47     symtrigon, symhyper, symcomplex,
48     syme, sympi, symi,symins, symdelimiter, symend,
49     symshow, symlist, symload, symsave, symexecute,
50     syminput, symoutput, symdigits,
51     symdec, symhex, symbin, symoct,
52     symmem, symprefs, symprompt, symversion,
53     symplot, symdraw
54 } Symbol;
.fi
.SH "Variable Documentation"
.PP 
.SS "const \fBoperatordef\fP operators[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    { '+', symplus},
    { '-', symminus},
    { '/', symslash},
    { '*', symtimes},
    { '^', sympower},
    { '(', symlparen},
    { ')', symrparen},
    { '|', symabsolute},
    { '=', symassign},
    { '\n', symdelimiter},
    { ';', symdelimiter}
}
.fi
.PP
Definition at line 65 of file lex\&.h\&.
.PP
Referenced by Lexer::FindKeyword(), and Lexer::GetOperator()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
