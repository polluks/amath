.TH "lib/real/kcos.c" 3 "Thu Jan 19 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/kcos.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fB__kernel_cos\fP (double x, double y)"
.br
.RI "\fIKernel cos function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP = 1\&.00000000000000000000e+00"
.br
.ti -1c
.RI "static const double \fBC1\fP = 4\&.16666666666666019037e\-02"
.br
.ti -1c
.RI "static const double \fBC2\fP = \-1\&.38888888888741095749e\-03"
.br
.ti -1c
.RI "static const double \fBC3\fP = 2\&.48015872894767294178e\-05"
.br
.ti -1c
.RI "static const double \fBC4\fP = \-2\&.75573143513906633035e\-07"
.br
.ti -1c
.RI "static const double \fBC5\fP = 2\&.08757232129817482790e\-09"
.br
.ti -1c
.RI "static const double \fBC6\fP = \-1\&.13596475577881948265e\-11"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double __kernel_cos (double x, double y)"

.PP
Kernel cos function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.4 
.RE
.PP
\fBDate:\fP
.RS 4
96/03/07
.RE
.PP
.PP
.nf

Kernel cos function on [-pi/4, pi/4], pi/4 ~ 0\&.785398164
Input x is assumed to be bounded by ~pi/4 in magnitude\&.
Input y is the tail of x\&.
.fi
.PP
.PP
.PP
.nf
Algorithm
 1\&. Since cos(-x) = cos(x), we need only to consider positive x\&.
 2\&. if x < 2^-27 (hx<0x3e400000 0), return 1 with inexact if x!=0\&.
 3\&. cos(x) is approximated by a polynomial of degree 14 on
    [0,pi/4]
                         4            14
        cos(x) ~ 1 - x*x/2 + C1*x + \&.\&.\&. + C6*x
    where the Remes error is
.fi
.PP
.PP
.PP
.nf
    |              2     4     6     8     10    12     14 |     -58
    |cos(x)-(1-\&.5*x +C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  )| <= 2
    |                                      |
.fi
.PP
.PP
.PP
.nf
                   4     6     8     10    12     14
 4\&. let r = C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  , then
        cos(x) = 1 - x*x/2 + r
    since cos(x+y) ~ cos(x) - sin(x)*y
          ~ cos(x) - x*y,
    a correction term is necessary in cos(x) and hence
    cos(x+y) = 1 - (x*x/2 - (r - x*y))
    For better accuracy when x > 0\&.3, let qx = |x|/4 with
    the last 32 bits mask off, and if x > 0\&.78125, let qx = 0\&.28125\&.
    Then
    cos(x+y) = (1-qx) - ((x*x/2-qx) - (r-x*y))\&.
    Note that 1-qx and (x*x/2-qx) is EXACT here, and the
    magnitude of the latter is at least a quarter of x*x/2,
    thus, reducing the rounding error in the subtraction\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 100 of file kcos\&.c\&.
.PP
References C1, C2, C3, C4, C5, C6, and one\&.
.PP
Referenced by cos(), and sin()\&.
.PP
.nf
101 {
102     double a,hz,z,r,qx;
103     sword ix;
104     GET_HIGH_WORD(ix, x);
105     ix &= 0x7fffffff;   /* ix = |x|'s high word*/
106     if(ix<0x3e400000) {         /* if x < 2**27 */
107         if(((int)x)==0) return one;     /* generate inexact */
108     }
109     z  = x*x;
110     r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
111     if(ix < 0x3FD33333)             /* if |x| < 0\&.3 */
112         return one - (0\&.5*z - (z*r - x*y));
113     else {
114         if(ix > 0x3fe90000) {       /* x > 0\&.78125 */
115             qx = 0\&.28125;
116         } else {
117             INSERT_WORDS(qx,ix-0x00200000,0);
118         }
119         hz = 0\&.5*z-qx;
120         a  = one-qx;
121         return a - (hz - (z*r-x*y));
122     }
123 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double C1 = 4\&.16666666666666019037e\-02\fC [static]\fP"

.PP
Definition at line 48 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double C2 = \-1\&.38888888888741095749e\-03\fC [static]\fP"

.PP
Definition at line 49 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double C3 = 2\&.48015872894767294178e\-05\fC [static]\fP"

.PP
Definition at line 50 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double C4 = \-2\&.75573143513906633035e\-07\fC [static]\fP"

.PP
Definition at line 51 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double C5 = 2\&.08757232129817482790e\-09\fC [static]\fP"

.PP
Definition at line 52 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double C6 = \-1\&.13596475577881948265e\-11\fC [static]\fP"

.PP
Definition at line 53 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SS "const double one = 1\&.00000000000000000000e+00\fC [static]\fP"

.PP
Definition at line 47 of file kcos\&.c\&.
.PP
Referenced by __kernel_cos()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
