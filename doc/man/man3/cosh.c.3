.TH "lib/real/cosh.c" 3 "Tue Jan 24 2017" "Version 1.6.2" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/cosh.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBcosh\fP (double x)"
.br
.RI "\fIHyperbolic cosine function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP = 1\&.0"
.br
.ti -1c
.RI "static const double \fBhalf\fP =0\&.5"
.br
.ti -1c
.RI "static const double \fBhuge\fP = 1\&.0e300"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double cosh (double x)"

.PP
Hyperbolic cosine function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Method :
mathematically cosh(x) if defined to be (exp(x)+exp(-x))/2
 1\&. Replace x by |x| (cosh(x) = cosh(-x))\&.
 2\&.
                                            [ exp(x) - 1 ]^2
     0        <= x <= ln2/2  :  cosh(x) := 1 + -------------------
                                   2*exp(x)
.fi
.PP
.PP
.PP
.nf
                                      exp(x) +  1/exp(x)
     ln2/2    <= x <= 22     :  cosh(x) := -------------------
                                  2
     22       <= x <= lnovft :  cosh(x) := exp(x)/2
     lnovft   <= x <= ln2ovft:  cosh(x) := exp(x/2)/2 * exp(x/2)
     ln2ovft  <  x      :  cosh(x) := huge*huge (overflow)
.fi
.PP
.PP
.PP
.nf
Special cases:
 cosh(x) is |x| if x is +INF, -INF, or NaN\&.
 only cosh(0)=1 is exact for finite x\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 84 of file cosh\&.c\&.
.PP
References exp(), expm1(), half, huge, and one\&.
.PP
Referenced by cchc(), cchsh(), ccot(), ccoth(), ccsc(), ccsch(), csec(), csech(), ctan(), ctanh(), RealNumber::HypCosine(), and RealNumber::HypSecant()\&.
.PP
.nf
85 {
86     double t,w;
87     sword ix;
88     uword lx;
89 
90     /* High word of |x|\&. */
91     GET_HIGH_WORD(ix,x);
92     ix &= 0x7fffffff;
93 
94     /* x is INF or NaN */
95     if(ix>=0x7ff00000) return x*x;
96 
97     /* |x| in [0,0\&.5*ln2], return 1+expm1(|x|)^2/(2*exp(|x|)) */
98     if(ix<0x3fd62e43) {
99         t = expm1(fabs(x));
100         w = one+t;
101         if (ix<0x3c800000) return w;    /* cosh(tiny) = 1 */
102         return one+(t*t)/(w+w);
103     }
104 
105     /* |x| in [0\&.5*ln2,22], return (exp(|x|)+1/exp(|x|)/2; */
106     if (ix < 0x40360000) {
107         t = exp(fabs(x));
108         return half*t+half/t;
109     }
110 
111     /* |x| in [22, log(maxdouble)] return half*exp(|x|) */
112     if (ix < 0x40862E42)  return half*exp(fabs(x));
113 
114     /* |x| in [log(maxdouble), overflowthresold] */
115     lx = *( (((*(unsigned*)&one)>>29)) + (unsigned*)&x);
116     if (ix<0x408633CE ||
117             ((ix==0x408633ce)&&(lx<=(unsigned)0x8fb9f87d))) {
118         w = exp(half*fabs(x));
119         t = half*w;
120         return t*w;
121     }
122 
123     /* |x| > overflowthresold, cosh(x) overflow */
124     return huge*huge;
125 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double half =0\&.5\fC [static]\fP"

.PP
Definition at line 51 of file cosh\&.c\&.
.PP
Referenced by cosh()\&.
.SS "const double huge = 1\&.0e300\fC [static]\fP"

.PP
Definition at line 51 of file cosh\&.c\&.
.PP
Referenced by cosh()\&.
.SS "const double one = 1\&.0\fC [static]\fP"

.PP
Definition at line 51 of file cosh\&.c\&.
.PP
Referenced by cosh()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
