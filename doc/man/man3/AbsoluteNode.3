.TH "AbsoluteNode" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AbsoluteNode \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <operators\&.h>\fP
.PP
Inherits \fBExpressionNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAbsoluteNode\fP (\fBExpressionNode\fP *\fBexpression\fP)"
.br
.ti -1c
.RI "\fB~AbsoluteNode\fP ()"
.br
.ti -1c
.RI "char * \fBGetText\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBEvaluate\fP ()"
.br
.ti -1c
.RI "int \fBGetPrecedence\fP ()"
.br
.ti -1c
.RI "\fBSyntaxNode\fP * \fBGetNext\fP ()"
.br
.ti -1c
.RI "void \fBAttach\fP (\fBSyntaxNode\fP *node)"
.br
.ti -1c
.RI "void \fBDetach\fP (\fBSyntaxNode\fP *node)"
.br
.ti -1c
.RI "void \fBReplace\fP (\fBSyntaxNode\fP *n, \fBSyntaxNode\fP *x)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "char * \fBGetNodeText\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBExpressionNode\fP * \fBexpression\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 60 of file operators\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AbsoluteNode::AbsoluteNode (\fBExpressionNode\fP * expression)"

.PP
Definition at line 125 of file operators\&.cpp\&.
.PP
References expression, and ExpressionNode::ExpressionNode()\&.
.PP
Referenced by Parser::ParseAtomic()\&.
.PP
.nf
125                                                      :
126     ExpressionNode(), expression(expression) { }
.fi
.SS "AbsoluteNode::~AbsoluteNode ()"

.PP
Definition at line 128 of file operators\&.cpp\&.
.PP
References expression\&.
.PP
.nf
129 {
130     if (expression != NOMEM) {
131         delete expression;
132     }
133 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void AbsoluteNode::Attach (\fBSyntaxNode\fP * node)\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 175 of file operators\&.cpp\&.
.PP
References expression, and SyntaxNode::SetParent()\&.
.PP
.nf
176 {
177     if (expression == NOMEM) {
178         expression = (ExpressionNode*)node;
179         node->SetParent(this);
180     }
181 }
.fi
.SS "void AbsoluteNode::Detach (\fBSyntaxNode\fP * node)\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 183 of file operators\&.cpp\&.
.PP
References expression\&.
.PP
.nf
184 {
185     if (expression == node) {
186         expression = NOMEM;
187     }
188 }
.fi
.SS "\fBNumber\fP * AbsoluteNode::Evaluate ()\fC [virtual]\fP"

.PP
Implements \fBExpressionNode\fP\&.
.PP
Definition at line 154 of file operators\&.cpp\&.
.PP
References Number::Absolute(), ExpressionNode::Evaluate(), expression, and ExpressionNode::result\&.
.PP
.nf
155 {
156     result = expression->Evaluate()->Absolute();
157     return result;
158 }
.fi
.SS "\fBSyntaxNode\fP * AbsoluteNode::GetNext ()\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 165 of file operators\&.cpp\&.
.PP
References expression, and SyntaxNode::iterator\&.
.PP
.nf
166 {
167     if (iterator == NOMEM) {
168         iterator = expression;
169         return iterator;
170     }
171 
172     return NOMEM;
173 }
.fi
.SS "char * AbsoluteNode::GetNodeText ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBExpressionNode\fP\&.
.PP
Definition at line 160 of file operators\&.cpp\&.
.PP
Referenced by GetText()\&.
.PP
.nf
161 {
162     return (char*)"|";
163 }
.fi
.SS "int AbsoluteNode::GetPrecedence ()\fC [virtual]\fP"

.PP
Implements \fBExpressionNode\fP\&.
.PP
Definition at line 149 of file operators\&.cpp\&.
.PP
.nf
150 {
151     return 8;
152 }
.fi
.SS "char * AbsoluteNode::GetText ()\fC [virtual]\fP"

.PP
Implements \fBExpressionNode\fP\&.
.PP
Definition at line 135 of file operators\&.cpp\&.
.PP
References CharBuffer::Append(), CharBuffer::Empty(), CharBuffer::EnsureSize(), expression, GetNodeText(), CharBuffer::GetString(), ExpressionNode::GetText(), SyntaxNode::output, and StrLen()\&.
.PP
.nf
136 {
137     const char *expText = expression->GetText();
138     const char *nodeText = GetNodeText();
139 
140     output->Empty();
141     output->EnsureSize(StrLen(expText) + StrLen(nodeText) * 2 + 1);
142     output->Append(nodeText);
143     output->Append(expText);
144     output->Append(nodeText);
145 
146     return output->GetString();
147 }
.fi
.SS "void AbsoluteNode::Replace (\fBSyntaxNode\fP * n, \fBSyntaxNode\fP * x)\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 190 of file operators\&.cpp\&.
.PP
References expression\&.
.PP
.nf
191 {
192     if (expression == n) {
193         delete expression;
194         expression = (ExpressionNode*)x;
195     }
196 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBExpressionNode\fP* AbsoluteNode::expression\fC [private]\fP"

.PP
Definition at line 77 of file operators\&.h\&.
.PP
Referenced by AbsoluteNode(), Attach(), Detach(), Evaluate(), GetNext(), GetText(), Replace(), and ~AbsoluteNode()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
