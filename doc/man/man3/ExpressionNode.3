.TH "ExpressionNode" 3 "Fri Jan 20 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExpressionNode \- Base class for all nodes related to mathematical expressions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <nodes\&.h>\fP
.PP
Inherits \fBSyntaxNode\fP\&.
.PP
Inherited by \fBAbsoluteNode\fP\fC [virtual]\fP, \fBFunctionNode\fP, \fBNumericOperator\fP\fC [virtual]\fP, \fBNumericValueNode\fP, \fBUnaryNode\fP\fC [virtual]\fP, and \fBVariableNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExpressionNode\fP ()"
.br
.ti -1c
.RI "\fBExpressionNode\fP (\fBNumber\fP *value)"
.br
.ti -1c
.RI "virtual \fB~ExpressionNode\fP ()"
.br
.ti -1c
.RI "\fBNodeType\fP \fBGetNodeType\fP ()"
.br
.ti -1c
.RI "virtual \fBbool\fP \fBIsSilent\fP ()"
.br
.ti -1c
.RI "virtual char * \fBGetText\fP ()=0"
.br
.ti -1c
.RI "virtual \fBNumber\fP * \fBEvaluate\fP ()=0"
.br
.ti -1c
.RI "virtual int \fBGetPrecedence\fP ()=0"
.br
.ti -1c
.RI "char * \fBGetTextCode\fP ()"
.br
.ti -1c
.RI "char * \fBExecute\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual char * \fBGetNodeText\fP ()=0"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBNumber\fP * \fBresult\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for all nodes related to mathematical expressions\&. 

Nodes of this type is used to build trees representing an mathematical expressions\&. Each node in the tree consist of a number, an operator or any other element in an expression\&. 
.PP
Definition at line 88 of file nodes\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ExpressionNode::ExpressionNode ()"

.PP
Definition at line 116 of file nodes\&.cpp\&.
.PP
References result, and SyntaxNode::SyntaxNode()\&.
.PP
Referenced by AbsoluteNode::AbsoluteNode(), FunctionNode::FunctionNode(), NumericOperator::NumericOperator(), UnaryNode::UnaryNode(), and VariableNode::VariableNode()\&.
.PP
.nf
116                                :
117     SyntaxNode() {
118     result = NOMEM;
119 }
.fi
.SS "ExpressionNode::ExpressionNode (\fBNumber\fP * value)"

.PP
Definition at line 121 of file nodes\&.cpp\&.
.PP
References result, and SyntaxNode::SyntaxNode()\&.
.PP
Referenced by NumericValueNode::NumericValueNode()\&.
.PP
.nf
121                                             :
122     SyntaxNode() {
123     result = value;
124 }
.fi
.SS "ExpressionNode::~ExpressionNode ()\fC [virtual]\fP"

.PP
Definition at line 126 of file nodes\&.cpp\&.
.PP
References result\&.
.PP
.nf
127 {
128     if (result != NOMEM) {
129         delete result;
130     }
131 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual \fBNumber\fP* ExpressionNode::Evaluate ()\fC [pure virtual]\fP"

.PP
Implemented in \fBHyperbolicArcSecantNode\fP, \fBHyperbolicArcCosecantNode\fP, \fBHyperbolicArcCotangentNode\fP, \fBHyperbolicArctangentNode\fP, \fBHyperbolicArcsineNode\fP, \fBHyperbolicArccosineNode\fP, \fBHyperbolicCosecantNode\fP, \fBHyperbolicSecantNode\fP, \fBHyperbolicCotangentNode\fP, \fBHyperbolicTangentNode\fP, \fBHyperbolicCosineNode\fP, \fBHyperbolicSineNode\fP, \fBArcSecantNode\fP, \fBArcCosecantNode\fP, \fBArcCotangentNode\fP, \fBArcTangentNode\fP, \fBArcCosineNode\fP, \fBArcSineNode\fP, \fBSecantNode\fP, \fBCosecantNode\fP, \fBCotangentNode\fP, \fBTangentNode\fP, \fBCosineNode\fP, \fBSineNode\fP, \fBBinaryLogNode\fP, \fBLnRootNode\fP, \fBLogNode\fP, \fBCubeRootNode\fP, \fBSquareRootNode\fP, \fBCeilingNode\fP, \fBFloorNode\fP, \fBTruncNode\fP, \fBRoundNode\fP, \fBSignumNode\fP, \fBAbsoluteFunctionNode\fP, \fBUserFunctionNode\fP, \fBAssignmentNode\fP, \fBNumericValueNode\fP, \fBPowerNode\fP, \fBInsVariableNode\fP, \fBDivisionNode\fP, \fBMultiplicationNode\fP, \fBSubtractionNode\fP, \fBVariableNode\fP, \fBAdditionNode\fP, \fBAbsoluteNode\fP, and \fBUnaryNode\fP\&.
.PP
Referenced by UnaryNode::Evaluate(), AbsoluteNode::Evaluate(), AdditionNode::Evaluate(), SubtractionNode::Evaluate(), MultiplicationNode::Evaluate(), DivisionNode::Evaluate(), PowerNode::Evaluate(), AssignmentNode::Evaluate(), UserFunctionNode::Evaluate(), AbsoluteFunctionNode::Evaluate(), SignumNode::Evaluate(), RoundNode::Evaluate(), TruncNode::Evaluate(), FloorNode::Evaluate(), CeilingNode::Evaluate(), SquareRootNode::Evaluate(), CubeRootNode::Evaluate(), LogNode::Evaluate(), LnRootNode::Evaluate(), BinaryLogNode::Evaluate(), SineNode::Evaluate(), CosineNode::Evaluate(), TangentNode::Evaluate(), CotangentNode::Evaluate(), CosecantNode::Evaluate(), SecantNode::Evaluate(), ArcSineNode::Evaluate(), ArcCosineNode::Evaluate(), ArcTangentNode::Evaluate(), ArcCotangentNode::Evaluate(), ArcCosecantNode::Evaluate(), ArcSecantNode::Evaluate(), HyperbolicSineNode::Evaluate(), HyperbolicCosineNode::Evaluate(), HyperbolicTangentNode::Evaluate(), HyperbolicCotangentNode::Evaluate(), HyperbolicSecantNode::Evaluate(), HyperbolicCosecantNode::Evaluate(), HyperbolicArccosineNode::Evaluate(), HyperbolicArcsineNode::Evaluate(), HyperbolicArctangentNode::Evaluate(), HyperbolicArcCotangentNode::Evaluate(), HyperbolicArcCosecantNode::Evaluate(), HyperbolicArcSecantNode::Evaluate(), EvalStatement::Execute(), and Grid::FunctionValue()\&.
.SS "char * ExpressionNode::Execute ()\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 148 of file nodes\&.cpp\&.
.PP
.nf
149 {
150     return NOMEM;
151 }
.fi
.SS "virtual char* ExpressionNode::GetNodeText ()\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implemented in \fBHyperbolicArcSecantNode\fP, \fBHyperbolicArcCosecantNode\fP, \fBHyperbolicArcCotangentNode\fP, \fBHyperbolicArctangentNode\fP, \fBHyperbolicArcsineNode\fP, \fBHyperbolicArccosineNode\fP, \fBHyperbolicCosecantNode\fP, \fBHyperbolicSecantNode\fP, \fBHyperbolicCotangentNode\fP, \fBHyperbolicTangentNode\fP, \fBHyperbolicCosineNode\fP, \fBHyperbolicSineNode\fP, \fBArcSecantNode\fP, \fBArcCosecantNode\fP, \fBArcCotangentNode\fP, \fBArcTangentNode\fP, \fBArcCosineNode\fP, \fBArcSineNode\fP, \fBSecantNode\fP, \fBCosecantNode\fP, \fBCotangentNode\fP, \fBTangentNode\fP, \fBCosineNode\fP, \fBSineNode\fP, \fBBinaryLogNode\fP, \fBLnRootNode\fP, \fBLogNode\fP, \fBCubeRootNode\fP, \fBSquareRootNode\fP, \fBCeilingNode\fP, \fBFloorNode\fP, \fBTruncNode\fP, \fBRoundNode\fP, \fBSignumNode\fP, \fBComplexiNode\fP, \fBAbsoluteFunctionNode\fP, \fBPiNode\fP, \fBEulersNumberNode\fP, \fBUserFunctionNode\fP, \fBNumericValueNode\fP, \fBAssignmentNode\fP, \fBPowerNode\fP, \fBInsVariableNode\fP, \fBDivisionNode\fP, \fBMultiplicationNode\fP, \fBVariableNode\fP, \fBSubtractionNode\fP, \fBAdditionNode\fP, \fBAbsoluteNode\fP, and \fBUnaryNode\fP\&.
.PP
Referenced by FunctionNode::GetText(), NumericOperator::GetText(), and GetTextCode()\&.
.SS "\fBNodeType\fP ExpressionNode::GetNodeType ()\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 133 of file nodes\&.cpp\&.
.PP
References expression\&.
.PP
.nf
134 {
135     return expression;
136 }
.fi
.SS "virtual int ExpressionNode::GetPrecedence ()\fC [pure virtual]\fP"

.PP
Implemented in \fBAssignmentNode\fP, \fBNumericValueNode\fP, \fBPowerNode\fP, \fBDivisionNode\fP, \fBMultiplicationNode\fP, \fBSubtractionNode\fP, \fBVariableNode\fP, \fBAdditionNode\fP, \fBAbsoluteNode\fP, \fBFunctionNode\fP, and \fBUnaryNode\fP\&.
.PP
Referenced by Optimizer::BalanceTree(), UnaryNode::GetText(), and NumericOperator::GetText()\&.
.SS "virtual char* ExpressionNode::GetText ()\fC [pure virtual]\fP"

.PP
Implemented in \fBNumericValueNode\fP, \fBInsVariableNode\fP, \fBVariableNode\fP, \fBNumericOperator\fP, \fBAbsoluteNode\fP, \fBFunctionNode\fP, and \fBUnaryNode\fP\&.
.PP
Referenced by EvalStatement::Execute(), UnaryNode::GetText(), FunctionNode::GetText(), AbsoluteNode::GetText(), NumericOperator::GetText(), UserFunction::InitializeTexts(), and FunctionList::ListContent()\&.
.SS "char * ExpressionNode::GetTextCode ()\fC [virtual]\fP"

.PP
Implements \fBSyntaxNode\fP\&.
.PP
Definition at line 143 of file nodes\&.cpp\&.
.PP
References GetNodeText()\&.
.PP
.nf
144 {
145     return GetNodeText();
146 }
.fi
.SS "\fBbool\fP ExpressionNode::IsSilent ()\fC [virtual]\fP"

.PP
Reimplemented in \fBAssignmentNode\fP\&.
.PP
Definition at line 138 of file nodes\&.cpp\&.
.PP
Referenced by Parser::ParseEvaluation()\&.
.PP
.nf
139 {
140     return false;
141 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBNumber\fP* ExpressionNode::result\fC [protected]\fP"

.PP
Definition at line 104 of file nodes\&.h\&.
.PP
Referenced by UnaryNode::Evaluate(), AbsoluteNode::Evaluate(), AdditionNode::Evaluate(), VariableNode::Evaluate(), SubtractionNode::Evaluate(), MultiplicationNode::Evaluate(), DivisionNode::Evaluate(), PowerNode::Evaluate(), NumericValueNode::Evaluate(), AbsoluteFunctionNode::Evaluate(), SignumNode::Evaluate(), RoundNode::Evaluate(), TruncNode::Evaluate(), FloorNode::Evaluate(), CeilingNode::Evaluate(), SquareRootNode::Evaluate(), CubeRootNode::Evaluate(), LogNode::Evaluate(), LnRootNode::Evaluate(), BinaryLogNode::Evaluate(), SineNode::Evaluate(), CosineNode::Evaluate(), TangentNode::Evaluate(), CotangentNode::Evaluate(), CosecantNode::Evaluate(), SecantNode::Evaluate(), ArcSineNode::Evaluate(), ArcCosineNode::Evaluate(), ArcTangentNode::Evaluate(), ArcCotangentNode::Evaluate(), ArcCosecantNode::Evaluate(), ArcSecantNode::Evaluate(), HyperbolicSineNode::Evaluate(), HyperbolicCosineNode::Evaluate(), HyperbolicTangentNode::Evaluate(), HyperbolicCotangentNode::Evaluate(), HyperbolicSecantNode::Evaluate(), HyperbolicCosecantNode::Evaluate(), HyperbolicArccosineNode::Evaluate(), HyperbolicArcsineNode::Evaluate(), HyperbolicArctangentNode::Evaluate(), HyperbolicArcCotangentNode::Evaluate(), HyperbolicArcCosecantNode::Evaluate(), HyperbolicArcSecantNode::Evaluate(), ExpressionNode(), NumericValueNode::GetNodeText(), NumericValueNode::GetPrecedence(), NumericValueNode::ReplaceWith(), and ~ExpressionNode()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
