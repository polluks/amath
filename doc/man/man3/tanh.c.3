.TH "lib/real/tanh.c" 3 "Sat Jan 21 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/tanh.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBtanh\fP (double x)"
.br
.RI "\fIHyperbolic tangent function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP =1\&.0"
.br
.ti -1c
.RI "static const double \fBtwo\fP =2\&.0"
.br
.ti -1c
.RI "static const double \fBtiny\fP = 1\&.0e\-300"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double tanh (double x)"

.PP
Hyperbolic tangent function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Return the Hyperbolic Tangent of x
.fi
.PP
.PP
.PP
.nf
Method :
                   x    -x
                  e  - e
 0\&. tanh(x) is defined to be -----------
                   x    -x
                  e  + e
 1\&. reduce x to non-negative by tanh(-x) = -tanh(x)\&.
 2\&.  0      <= x <= 2**-55 : tanh(x) := x*(one+x)
                        -t
     2**-55 <  x <=  1     : tanh(x) := -----; t = expm1(-2x)
                       t + 2
                         2
     1      <= x <=  22\&.0  : tanh(x) := 1-  ----- ; t=expm1(2x)
                       t + 2
     22\&.0   <  x <= INF    : tanh(x) := 1\&.
.fi
.PP
.PP
.PP
.nf
Special cases:
 tanh(NaN) is NaN;
 only tanh(0)=0 is exact for finite argument\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 83 of file tanh\&.c\&.
.PP
References expm1(), one, tiny, and two\&.
.PP
Referenced by RealNumber::HypCotangent(), and RealNumber::HypTangent()\&.
.PP
.nf
84 {
85     double t,z;
86     sword jx,ix;
87 
88     /* High word of |x|\&. */
89     GET_HIGH_WORD(jx,x);
90     ix = jx&0x7fffffff;
91 
92     /* x is INF or NaN */
93     if(ix>=0x7ff00000) {
94         if (jx>=0) return one/x+one;    /* tanh(+-inf)=+-1 */
95         else       return one/x-one;    /* tanh(NaN) = NaN */
96     }
97 
98     /* |x| < 22 */
99     if (ix < 0x40360000) {      /* |x|<22 */
100         if (ix<0x3c800000)      /* |x|<2**-55 */
101             return x*(one+x);       /* tanh(small) = small */
102         if (ix>=0x3ff00000) {   /* |x|>=1  */
103             t = expm1(two*fabs(x));
104             z = one - two/(t+two);
105         } else {
106             t = expm1(-two*fabs(x));
107             z= -t/(t+two);
108         }
109         /* |x| > 22, return +-1 */
110     } else {
111         z = one - tiny;     /* raised inexact flag */
112     }
113     return (jx>=0)? z: -z;
114 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double one =1\&.0\fC [static]\fP"

.PP
Definition at line 47 of file tanh\&.c\&.
.PP
Referenced by tanh()\&.
.SS "const double tiny = 1\&.0e\-300\fC [static]\fP"

.PP
Definition at line 47 of file tanh\&.c\&.
.PP
Referenced by tanh()\&.
.SS "const double two =2\&.0\fC [static]\fP"

.PP
Definition at line 47 of file tanh\&.c\&.
.PP
Referenced by tanh()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
