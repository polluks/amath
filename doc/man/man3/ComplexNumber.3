.TH "ComplexNumber" 3 "Tue Jan 24 2017" "Version 1.6.2" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ComplexNumber \- Represent a complex number with 2 componts of 15 siginificant digits\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cplex\&.h>\fP
.PP
Inherits \fBNumber\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBComplexNumber\fP ()"
.br
.ti -1c
.RI "\fBComplexNumber\fP (\fBcomplex\fP \fBz\fP)"
.br
.ti -1c
.RI "\fBComplexNumber\fP (double real, double imag)"
.br
.ti -1c
.RI "\fB~ComplexNumber\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBClone\fP ()"
.br
.ti -1c
.RI "int \fBGetIntegerValue\fP ()"
.br
.ti -1c
.RI "double \fBGetRealValue\fP ()"
.br
.ti -1c
.RI "double \fBGetImagValue\fP ()"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetComplexValue\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBPureComplexValue\fP ()"
.br
.ti -1c
.RI "int \fBGetPrecedence\fP ()"
.br
.ti -1c
.RI "int \fBGetDefaultPrecedence\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBUnary\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBAdd\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSub\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBMul\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBDiv\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBRaise\fP (\fBNumber\fP *exponent)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSignum\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBTrunc\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBRound\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBFloor\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBCeiling\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBAbsolute\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSquareRoot\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBCubeRoot\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBReciprocal\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBLog\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBLog2\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBLog10\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBCosine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBTangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBCosecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBCotangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcSine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcCosine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcTangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcCosecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcSecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBArcCotangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypSine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypCosine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypTangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypCosecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypSecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypCotangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcSine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCosine\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcTangent\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCosecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcSecant\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCotangent\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBcomplex\fP \fBz\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Represent a complex number with 2 componts of 15 siginificant digits\&. 

Calculations are done using 64 bit IEEE 754 arithmetics\&. 
.PP
Definition at line 46 of file cplex\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ComplexNumber::ComplexNumber ()"

.PP
Definition at line 33 of file cplex\&.cpp\&.
.PP
References cpack(), nsyscomplex, Number::Number(), and z\&.
.PP
Referenced by Add(), Div(), Mul(), Raise(), and Sub()\&.
.PP
.nf
33                              :
34     Number(nsyscomplex) {
35     z = cpack(0\&.0, 0\&.0);
36 }
.fi
.SS "ComplexNumber::ComplexNumber (\fBcomplex\fP z)"

.PP
Definition at line 38 of file cplex\&.cpp\&.
.PP
References nsyscomplex, Number::Number(), and z\&.
.PP
Referenced by Add(), ArcCosecant(), ArcCosine(), ArcCotangent(), ArcSecant(), ArcSine(), ArcTangent(), Ceiling(), Clone(), Cosecant(), Cosine(), Cotangent(), CubeRoot(), Div(), Floor(), HypArcCosecant(), HypArcCosine(), HypArcCotangent(), HypArcSecant(), HypArcSine(), HypArcTangent(), HypCosecant(), HypCosine(), HypCotangent(), HypSecant(), HypSine(), HypTangent(), Log(), Log10(), Log2(), Mul(), Raise(), Reciprocal(), Round(), Secant(), Sine(), SquareRoot(), Sub(), Tangent(), Trunc(), and Unary()\&.
.PP
.nf
38                                       :
39     Number(nsyscomplex) {
40     this->z = z;
41 }
.fi
.SS "ComplexNumber::ComplexNumber (double real, double imag)"

.PP
Definition at line 43 of file cplex\&.cpp\&.
.PP
References cpack(), nsyscomplex, Number::Number(), and z\&.
.PP
Referenced by ComplexiNode::ComplexiNode(), Parser::ParseNumber(), RealNumber::Raise(), and RealNumber::SquareRoot()\&.
.PP
.nf
43                                                      :
44     Number(nsyscomplex) {
45     z = cpack(real, imag);
46 }
.fi
.SS "ComplexNumber::~ComplexNumber ()"

.PP
Definition at line 48 of file cplex\&.cpp\&.
.PP
.nf
49 { }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBNumber\fP * ComplexNumber::Absolute ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 173 of file cplex\&.cpp\&.
.PP
References cabs(), RealNumber::RealNumber(), and z\&.
.PP
.nf
174 {
175     return new RealNumber(cabs(z));
176 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Add (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 103 of file cplex\&.cpp\&.
.PP
References cadd(), ComplexNumber(), cpack(), nsyscomplex, nsysreal, Number::system, RealNumber::x, and z\&.
.PP
.nf
104 {
105     if (other->system == nsyscomplex) {
106         ComplexNumber *w = (ComplexNumber*)other;
107         return new ComplexNumber(cadd(z, w->z));
108     } else  if (other->system == nsysreal) {
109         RealNumber *a = (RealNumber*)other;
110         return new ComplexNumber(cadd(z, cpack(a->x, 0\&.0)));
111     } else {
112         return new ComplexNumber();
113     }
114 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcCosecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 278 of file cplex\&.cpp\&.
.PP
References cacsc(), ComplexNumber(), and z\&.
.PP
.nf
279 {
280     return new ComplexNumber(cacsc(z));
281 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcCosine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 263 of file cplex\&.cpp\&.
.PP
References cacos(), ComplexNumber(), and z\&.
.PP
.nf
264 {
265     return new ComplexNumber(cacos(z));
266 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcCotangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 283 of file cplex\&.cpp\&.
.PP
References cacot(), ComplexNumber(), and z\&.
.PP
.nf
284 {
285     return new ComplexNumber(cacot(z));
286 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcSecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 273 of file cplex\&.cpp\&.
.PP
References casec(), ComplexNumber(), and z\&.
.PP
.nf
274 {
275     return new ComplexNumber(casec(z));
276 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcSine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 258 of file cplex\&.cpp\&.
.PP
References casin(), ComplexNumber(), and z\&.
.PP
.nf
259 {
260     return new ComplexNumber(casin(z));
261 }
.fi
.SS "\fBNumber\fP * ComplexNumber::ArcTangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 268 of file cplex\&.cpp\&.
.PP
References catan(), ComplexNumber(), and z\&.
.PP
.nf
269 {
270     return new ComplexNumber(catan(z));
271 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Ceiling ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 193 of file cplex\&.cpp\&.
.PP
References cceil(), ComplexNumber(), and z\&.
.PP
.nf
194 {
195     return new ComplexNumber(cceil(z));
196 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Clone ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 51 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), and z\&.
.PP
.nf
52 {
53     return new ComplexNumber(z);
54 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Cosecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 248 of file cplex\&.cpp\&.
.PP
References ccsc(), ComplexNumber(), and z\&.
.PP
.nf
249 {
250     return new ComplexNumber(ccsc(z));
251 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Cosine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 233 of file cplex\&.cpp\&.
.PP
References ccos(), ComplexNumber(), and z\&.
.PP
.nf
234 {
235     return new ComplexNumber(ccos(z));
236 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Cotangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 253 of file cplex\&.cpp\&.
.PP
References ccot(), ComplexNumber(), and z\&.
.PP
.nf
254 {
255     return new ComplexNumber(ccot(z));
256 }
.fi
.SS "\fBNumber\fP * ComplexNumber::CubeRoot ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 208 of file cplex\&.cpp\&.
.PP
References ccbrt(), ComplexNumber(), and z\&.
.PP
.nf
209 {
210     return new ComplexNumber(ccbrt(z));
211 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Div (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 142 of file cplex\&.cpp\&.
.PP
References cdiv(), ComplexNumber(), cpack(), nsyscomplex, nsysreal, Number::system, RealNumber::x, and z\&.
.PP
.nf
143 {
144     if (other->system == nsyscomplex) {
145         ComplexNumber *w = (ComplexNumber*)other;
146         return new ComplexNumber(cdiv(z, w->z));
147     } else  if (other->system == nsysreal) {
148         RealNumber *a = (RealNumber*)other;
149         return new ComplexNumber(cdiv(z, cpack(a->x, 0\&.0)));
150     } else {
151         return new ComplexNumber();
152     }
153 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Floor ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 188 of file cplex\&.cpp\&.
.PP
References cfloor(), ComplexNumber(), and z\&.
.PP
.nf
189 {
190     return new ComplexNumber(cfloor(z));
191 }
.fi
.SS "\fBcomplex\fP ComplexNumber::GetComplexValue ()"

.PP
Definition at line 71 of file cplex\&.cpp\&.
.PP
References z\&.
.PP
Referenced by PositionalNumeralSystem::GetText(), and DecimalSystem::GetText()\&.
.PP
.nf
72 {
73     return z;
74 }
.fi
.SS "int ComplexNumber::GetDefaultPrecedence ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 92 of file cplex\&.cpp\&.
.PP
References cimag(), creal(), and z\&.
.PP
.nf
93 {
94     return (creal(z) != 0\&.0 && cimag(z) != 0\&.0) ? 2 : 0;
95 }
.fi
.SS "double ComplexNumber::GetImagValue ()"

.PP
Definition at line 66 of file cplex\&.cpp\&.
.PP
References cimag(), and z\&.
.PP
.nf
67 {
68     return cimag(z);
69 }
.fi
.SS "int ComplexNumber::GetIntegerValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 56 of file cplex\&.cpp\&.
.PP
References creal(), and z\&.
.PP
.nf
57 {
58     return (int) creal(z);
59 }
.fi
.SS "int ComplexNumber::GetPrecedence ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 81 of file cplex\&.cpp\&.
.PP
References cimag(), creal(), and z\&.
.PP
.nf
82 {
83     if ((creal(z) < 0\&.0) || (creal(z) == 0\&.0 && cimag(z) < 0\&.0)) {
84         return -1;
85     } else  if (creal(z) != 0\&.0 && cimag(z) != 0\&.0) {
86         return 2;
87     } else {
88         return 0;
89     }
90 }
.fi
.SS "double ComplexNumber::GetRealValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 61 of file cplex\&.cpp\&.
.PP
References creal(), and z\&.
.PP
.nf
62 {
63     return creal(z);
64 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcCosecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 338 of file cplex\&.cpp\&.
.PP
References cacsch(), ComplexNumber(), and z\&.
.PP
.nf
339 {
340     return new ComplexNumber(cacsch(z));
341 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcCosine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 323 of file cplex\&.cpp\&.
.PP
References cacosh(), ComplexNumber(), and z\&.
.PP
.nf
324 {
325     return new ComplexNumber(cacosh(z));
326 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcCotangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 343 of file cplex\&.cpp\&.
.PP
References cacoth(), ComplexNumber(), and z\&.
.PP
.nf
344 {
345     return new ComplexNumber(cacoth(z));
346 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcSecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 333 of file cplex\&.cpp\&.
.PP
References casech(), ComplexNumber(), and z\&.
.PP
.nf
334 {
335     return new ComplexNumber(casech(z));
336 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcSine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 318 of file cplex\&.cpp\&.
.PP
References casinh(), ComplexNumber(), and z\&.
.PP
.nf
319 {
320     return new ComplexNumber(casinh(z));
321 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypArcTangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 328 of file cplex\&.cpp\&.
.PP
References catanh(), ComplexNumber(), and z\&.
.PP
.nf
329 {
330     return new ComplexNumber(catanh(z));
331 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypCosecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 308 of file cplex\&.cpp\&.
.PP
References ccsch(), ComplexNumber(), and z\&.
.PP
.nf
309 {
310     return new ComplexNumber(ccsch(z));
311 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypCosine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 293 of file cplex\&.cpp\&.
.PP
References ccosh(), ComplexNumber(), and z\&.
.PP
.nf
294 {
295     return new ComplexNumber(ccosh(z));
296 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypCotangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 313 of file cplex\&.cpp\&.
.PP
References ccoth(), ComplexNumber(), and z\&.
.PP
.nf
314 {
315     return new ComplexNumber(ccoth(z));
316 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypSecant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 303 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), csech(), and z\&.
.PP
.nf
304 {
305     return new ComplexNumber(csech(z));
306 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypSine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 288 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), csinh(), and z\&.
.PP
.nf
289 {
290     return new ComplexNumber(csinh(z));
291 }
.fi
.SS "\fBNumber\fP * ComplexNumber::HypTangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 298 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), ctanh(), and z\&.
.PP
.nf
299 {
300     return new ComplexNumber(ctanh(z));
301 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Log ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 213 of file cplex\&.cpp\&.
.PP
References clog(), ComplexNumber(), and z\&.
.PP
.nf
214 {
215     return new ComplexNumber(clog(z));
216 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Log10 ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 223 of file cplex\&.cpp\&.
.PP
References clog10(), ComplexNumber(), and z\&.
.PP
.nf
224 {
225     return new ComplexNumber(clog10(z));
226 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Log2 ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 218 of file cplex\&.cpp\&.
.PP
References clogb(), ComplexNumber(), and z\&.
.PP
.nf
219 {
220     return new ComplexNumber(clogb(z));
221 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Mul (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 129 of file cplex\&.cpp\&.
.PP
References cmul(), ComplexNumber(), cpack(), nsyscomplex, nsysreal, Number::system, RealNumber::x, and z\&.
.PP
.nf
130 {
131     if (other->system == nsyscomplex) {
132         ComplexNumber *w = (ComplexNumber*)other;
133         return new ComplexNumber(cmul(z, w->z));
134     } else  if (other->system == nsysreal) {
135         RealNumber *a = (RealNumber*)other;
136         return new ComplexNumber(cmul(z, cpack(a->x, 0\&.0)));
137     } else {
138         return new ComplexNumber();
139     }
140 }
.fi
.SS "\fBbool\fP ComplexNumber::PureComplexValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 76 of file cplex\&.cpp\&.
.PP
References creal(), and z\&.
.PP
.nf
77 {
78     return (creal(z) == 0\&.0);
79 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Raise (\fBNumber\fP * exponent)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 155 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), cpack(), cpow(), nsyscomplex, nsysreal, Number::system, RealNumber::x, and z\&.
.PP
Referenced by RealNumber::Raise()\&.
.PP
.nf
156 {
157     if (exponent->system == nsyscomplex) {
158         ComplexNumber *w = (ComplexNumber*)exponent;
159         return new ComplexNumber(cpow(z, w->z));
160     } else  if (exponent->system == nsysreal) {
161         RealNumber *a = (RealNumber*)exponent;
162         return new ComplexNumber(cpow(z, cpack(a->x, 0\&.0)));
163     } else {
164         return new ComplexNumber();
165     }
166 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Reciprocal ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 203 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), creci(), and z\&.
.PP
.nf
204 {
205     return new ComplexNumber(creci(z));
206 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Round ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 183 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), cround(), and z\&.
.PP
.nf
184 {
185     return new ComplexNumber(cround(z));
186 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Secant ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 243 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), csec(), and z\&.
.PP
.nf
244 {
245     return new ComplexNumber(csec(z));
246 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Signum ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 168 of file cplex\&.cpp\&.
.PP
References csgn(), RealNumber::RealNumber(), and z\&.
.PP
.nf
169 {
170     return new RealNumber(csgn(z));
171 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Sine ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 228 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), csin(), and z\&.
.PP
.nf
229 {
230     return new ComplexNumber(csin(z));
231 }
.fi
.SS "\fBNumber\fP * ComplexNumber::SquareRoot ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 198 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), csqrt(), and z\&.
.PP
.nf
199 {
200     return new ComplexNumber(csqrt(z));
201 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Sub (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 116 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), cpack(), csub(), nsyscomplex, nsysreal, Number::system, RealNumber::x, and z\&.
.PP
.nf
117 {
118     if (other->system == nsyscomplex) {
119         ComplexNumber *w = (ComplexNumber*)other;
120         return new ComplexNumber(csub(z, w->z));
121     } else  if (other->system == nsysreal) {
122         RealNumber *a = (RealNumber*)other;
123         return new ComplexNumber(csub(z, cpack(a->x, 0\&.0)));
124     } else {
125         return new ComplexNumber();
126     }
127 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Tangent ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 238 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), ctan(), and z\&.
.PP
.nf
239 {
240     return new ComplexNumber(ctan(z));
241 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Trunc ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 178 of file cplex\&.cpp\&.
.PP
References ComplexNumber(), ctrunc(), and z\&.
.PP
.nf
179 {
180     return new ComplexNumber(ctrunc(z));
181 }
.fi
.SS "\fBNumber\fP * ComplexNumber::Unary ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 97 of file cplex\&.cpp\&.
.PP
References cimag(), ComplexNumber(), cpack(), creal(), and z\&.
.PP
.nf
98 {
99     complex w = cpack(-creal(z), -cimag(z));
100     return new ComplexNumber(w);
101 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBcomplex\fP ComplexNumber::z\fC [private]\fP"

.PP
Definition at line 112 of file cplex\&.h\&.
.PP
Referenced by Absolute(), Add(), ArcCosecant(), ArcCosine(), ArcCotangent(), ArcSecant(), ArcSine(), ArcTangent(), Ceiling(), Clone(), ComplexNumber(), Cosecant(), Cosine(), Cotangent(), CubeRoot(), Div(), Floor(), GetComplexValue(), GetDefaultPrecedence(), GetImagValue(), GetIntegerValue(), GetPrecedence(), GetRealValue(), HypArcCosecant(), HypArcCosine(), HypArcCotangent(), HypArcSecant(), HypArcSine(), HypArcTangent(), HypCosecant(), HypCosine(), HypCotangent(), HypSecant(), HypSine(), HypTangent(), Log(), Log10(), Log2(), Mul(), PureComplexValue(), Raise(), Reciprocal(), Round(), Secant(), Signum(), Sine(), SquareRoot(), Sub(), Tangent(), Trunc(), and Unary()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
