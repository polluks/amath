.TH "lib/real/atanh.c" 3 "Tue Jan 24 2017" "Version 1.6.2" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/atanh.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBatanh\fP (double x)"
.br
.RI "\fIInverse hyperbolic tangent function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP = 1\&.0"
.br
.ti -1c
.RI "static const double \fBhuge\fP = 1e300"
.br
.ti -1c
.RI "static double \fBzero\fP = 0\&.0"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double atanh (double x)"

.PP
Inverse hyperbolic tangent function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Method :
   1\&.Reduced x to positive by atanh(-x) = -atanh(x)
   2\&.For x>=0\&.5
                 1              2x                          x
 atanh(x) = --- * log(1 + -------) = 0\&.5 * log1p(2 * --------)
                 2             1 - x                      1 - x
.fi
.PP
.PP
.PP
.nf
    For x<0\&.5
 atanh(x) = 0\&.5*log1p(2x+2x*x/(1-x))
.fi
.PP
.PP
.PP
.nf
Special cases:
 atanh(x) is NaN if |x| > 1 with signal;
 atanh(NaN) is that NaN with no signal;
 atanh(+-1) is +-INF with signal\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 81 of file atanh\&.c\&.
.PP
References huge, log1p(), one, and zero\&.
.PP
Referenced by RealNumber::HypArcCotangent(), and RealNumber::HypArcTangent()\&.
.PP
.nf
82 {
83     double t;
84     sword hx,ix;
85     uword lx;
86     GET_HIGH_WORD(hx,x);
87     GET_LOW_WORD(lx,x);
88     ix = hx&0x7fffffff;
89     if ((ix|((lx|(-lx))>>31))>0x3ff00000) /* |x|>1 */
90         return (x-x)/(x-x);
91     if(ix==0x3ff00000)
92         return x/zero;
93     if(ix<0x3e300000&&(huge+x)>zero) return x;  /* x<2**-28 */
94     SET_HIGH_WORD(x, ix);       /* x <- |x| */
95     if(ix<0x3fe00000) {     /* x < 0\&.5 */
96         t = x+x;
97         t = 0\&.5*log1p(t+t*x/(one-x));
98     } else
99         t = 0\&.5*log1p((x+x)/(one-x));
100     if(hx>=0) return t;
101     else return -t;
102 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double huge = 1e300\fC [static]\fP"

.PP
Definition at line 51 of file atanh\&.c\&.
.PP
Referenced by atanh()\&.
.SS "const double one = 1\&.0\fC [static]\fP"

.PP
Definition at line 51 of file atanh\&.c\&.
.PP
Referenced by atanh()\&.
.SS "double zero = 0\&.0\fC [static]\fP"

.PP
Definition at line 52 of file atanh\&.c\&.
.PP
Referenced by atanh()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
