.TH "StandardLanguage" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
StandardLanguage \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <language_stdc\&.h>\fP
.PP
Inherits \fBLanguage\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStandardLanguage\fP ()"
.br
.ti -1c
.RI "\fB~StandardLanguage\fP ()"
.br
.ti -1c
.RI "char \fBGetFractionPoint\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsAlNum\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsAlpha\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsDigit\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsPunct\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsSpace\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsCntrl\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBStrIsEqualLoc\fP (const char *s1, const char *s2)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "char * \fBTranslate\fP (\fBtextdef\fP *def)"
.br
.ti -1c
.RI "char * \fBTranslate\fP (\fBhelptextdef\fP *def)"
.br
.ti -1c
.RI "char * \fBTranslate\fP (\fBidenthelpdef\fP *def)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBLoadCatalogs\fP ()"
.br
.ti -1c
.RI "void \fBLoadCatalog\fP (char **dest, const char *file)"
.br
.ti -1c
.RI "void \fBGetNextPair\fP (const char **key, const char **value)"
.br
.ti -1c
.RI "void \fBGetNextLine\fP ()"
.br
.ti -1c
.RI "void \fBSkipComments\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fBtextbase\fP"
.br
.ti -1c
.RI "char * \fBhelpbase\fP"
.br
.ti -1c
.RI "char * \fBidentbase\fP"
.br
.ti -1c
.RI "char * \fBkwordbase\fP"
.br
.ti -1c
.RI "char * \fBptr\fP"
.br
.ti -1c
.RI "\fBtextdef\fP * \fBtextcatalog\fP"
.br
.ti -1c
.RI "\fBhelptextdef\fP * \fBhelpcatalog\fP"
.br
.ti -1c
.RI "\fBidenthelpdef\fP * \fBidentcatalog\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 35 of file language_stdc\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "StandardLanguage::StandardLanguage ()"

.PP
Definition at line 38 of file language_stdc\&.cpp\&.
.PP
References Language::Language(), and LoadCatalogs()\&.
.PP
Referenced by CreateLanguage()\&.
.PP
.nf
38                                    :
39     Language()
40 {
41     LoadCatalogs();
42 }
.fi
.SS "StandardLanguage::~StandardLanguage ()"

.PP
Definition at line 44 of file language_stdc\&.cpp\&.
.PP
References helpbase, identbase, kwordbase, and textbase\&.
.PP
.nf
45 {
46     if (textbase != NOMEM) {
47         delete textbase;
48     }
49 
50     if (helpbase != NOMEM) {
51         delete helpbase;
52     }
53 
54     if (identbase != NOMEM) {
55         delete identbase;
56     }
57 
58     if (kwordbase != NOMEM) {
59         delete kwordbase;
60     }
61 
62 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBbool\fP StandardLanguage::CharIsAlNum (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 90 of file language_stdc\&.cpp\&.
.PP
.nf
91 {
92     return (character >= 'a' && character <= 'z') ||
93            (character >= 'A' && character <= 'Z') ||
94            (character >= '0' && character <= '9');
95 }
.fi
.SS "\fBbool\fP StandardLanguage::CharIsAlpha (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 97 of file language_stdc\&.cpp\&.
.PP
.nf
98 {
99     return (character >= 'a' && character <= 'z') ||
100            (character >= 'A' && character <= 'Z');
101 }
.fi
.SS "\fBbool\fP StandardLanguage::CharIsCntrl (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 118 of file language_stdc\&.cpp\&.
.PP
.nf
119 {
120     return (character < 32 || character > 125);
121 }
.fi
.SS "\fBbool\fP StandardLanguage::CharIsDigit (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 103 of file language_stdc\&.cpp\&.
.PP
.nf
104 {
105     return (character >= '0' && character <= '9');
106 }
.fi
.SS "\fBbool\fP StandardLanguage::CharIsPunct (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 108 of file language_stdc\&.cpp\&.
.PP
.nf
109 {
110     return (character == '\&.');
111 }
.fi
.SS "\fBbool\fP StandardLanguage::CharIsSpace (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 113 of file language_stdc\&.cpp\&.
.PP
.nf
114 {
115     return (character == 32);
116 }
.fi
.SS "char StandardLanguage::GetFractionPoint ()\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 85 of file language_stdc\&.cpp\&.
.PP
.nf
86 {
87     return '\&.';
88 }
.fi
.SS "void StandardLanguage::GetNextLine ()\fC [private]\fP"

.PP
Definition at line 207 of file language_stdc\&.cpp\&.
.PP
References ptr\&.
.PP
Referenced by GetNextPair(), and SkipComments()\&.
.PP
.nf
208 {
209     while ((*ptr) != '\0' && (*ptr) != '\n') {
210         ptr++;
211     }
212 
213     if ((*ptr) == '\n') {
214         *ptr++ = '\0';
215     }
216 }
.fi
.SS "void StandardLanguage::GetNextPair (const char ** key, const char ** value)\fC [private]\fP"

.PP
Definition at line 197 of file language_stdc\&.cpp\&.
.PP
References GetNextLine(), ptr, and SkipComments()\&.
.PP
.nf
198 {
199     SkipComments();
200     *key = ptr;
201     GetNextLine();
202     SkipComments();
203     *value = ptr;
204     GetNextLine();
205 }
.fi
.SS "void StandardLanguage::LoadCatalog (char ** dest, const char * file)\fC [private]\fP"

.PP
Definition at line 181 of file language_stdc\&.cpp\&.
.PP
References AllocAndCopy(), CreateFilesystem(), CharBuffer::GetString(), FilesystemBase::LoadTextFile(), and ptr\&.
.PP
.nf
182 {
183     FilesystemBase *filesystem = CreateFilesystem();
184     CharBuffer *cbuf = filesystem->LoadTextFile(file);
185 
186     if (cbuf != NOMEM) {
187         AllocAndCopy(dest, cbuf->GetString());
188         ptr = *dest;
189         delete cbuf;
190     } else {
191         *dest = NOMEM;
192     }
193 
194     delete filesystem;
195 }
.fi
.SS "void StandardLanguage::LoadCatalogs ()\fC [private]\fP"

.PP
Definition at line 129 of file language_stdc\&.cpp\&.
.PP
Referenced by StandardLanguage()\&.
.PP
.nf
130 {
131     /* Just use english for now
132 
133     const char* key;
134     const char* value;
135 
136     LoadCatalog(&textbase, "utext/dk-text\&.dict");
137     if (textbase != NOMEM) {
138         textcatalog = new textdef[textcount];
139         for (unsigned int j = 0; j < textcount; j++) {
140             GetNextPair(&key, &value);
141             textcatalog[j]\&.id = j;
142             textcatalog[j]\&.text = value;
143         }
144     }
145 
146     LoadCatalog(&helpbase, "utext/dk-help\&.dict");
147     if (helpbase != NOMEM) {
148         helpcatalog = new helptextdef[helpcount];
149         for (unsigned int j = 0; j < helpcount; j++) {
150             GetNextPair(&key, &value);
151             helpcatalog[j]\&.id = j;
152             helpcatalog[j]\&.symbol = helptexts[j]\&.symbol;
153             helpcatalog[j]\&.text = value;
154         }
155     }
156 
157     LoadCatalog(&identbase, "utext/dk-ident\&.dict");
158     if (identbase != NOMEM) {
159         identcatalog = new identhelpdef[identcount];
160         for (unsigned int j = 0; j < identcount; j++) {
161             GetNextPair(&key, &value);
162             identcatalog[j]\&.id = j;
163             identcatalog[j]\&.ident = key;
164             identcatalog[j]\&.text = value;
165         }
166     }
167 
168     LoadCatalog(&kwordbase, "utext/dk-keyword\&.dict");
169     if (kwordbase != NOMEM) {
170         keywordsloc = new keyworddef[keywordcount];
171         for (unsigned int j = 0; j < keywordcount; j++) {
172             GetNextPair(&key, &value);
173             keywordsloc[j]\&.id = j;
174             keywordsloc[j]\&.name = value;
175             keywordsloc[j]\&.symbol = keywords[j]\&.symbol;
176         }
177     }
178     */
179 }
.fi
.SS "void StandardLanguage::SkipComments ()\fC [private]\fP"

.PP
Definition at line 218 of file language_stdc\&.cpp\&.
.PP
References GetNextLine(), and ptr\&.
.PP
Referenced by GetNextPair()\&.
.PP
.nf
219 {
220     bool skipping;
221     do {
222         if ((*ptr) == ';') {
223             GetNextLine();
224             skipping = true;
225         } else if ((*ptr) == '#' && *(ptr + sizeof(char)) == '#') {
226             GetNextLine();
227             skipping = true;
228         } else {
229             skipping = false;
230         }
231     } while (skipping);
232 }
.fi
.SS "\fBbool\fP StandardLanguage::StrIsEqualLoc (const char * s1, const char * s2)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 123 of file language_stdc\&.cpp\&.
.PP
References StrIsEqual()\&.
.PP
.nf
124 {
125     return StrIsEqual(s1, s2);
126 }
.fi
.SS "char * StandardLanguage::Translate (\fBtextdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 64 of file language_stdc\&.cpp\&.
.PP
References textdef::id, textdef::text, and textcatalog\&.
.PP
.nf
65 {
66     return textcatalog == NOMEM ?
67            (char*)def->text :
68            (char*)textcatalog[def->id]\&.text;
69 }
.fi
.SS "char * StandardLanguage::Translate (\fBhelptextdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 71 of file language_stdc\&.cpp\&.
.PP
References helpcatalog, helptextdef::id, and helptextdef::text\&.
.PP
.nf
72 {
73     return helpcatalog == NOMEM ?
74            (char*)def->text :
75            (char*)helpcatalog[def->id]\&.text;
76 }
.fi
.SS "char * StandardLanguage::Translate (\fBidenthelpdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 78 of file language_stdc\&.cpp\&.
.PP
References identhelpdef::id, identcatalog, and identhelpdef::text\&.
.PP
.nf
79 {
80     return identcatalog == NOMEM ?
81            (char*)def->text :
82            (char*)identcatalog[def->id]\&.text;
83 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "char* StandardLanguage::helpbase\fC [private]\fP"

.PP
Definition at line 61 of file language_stdc\&.h\&.
.PP
Referenced by ~StandardLanguage()\&.
.SS "\fBhelptextdef\fP* StandardLanguage::helpcatalog\fC [private]\fP"

.PP
Definition at line 67 of file language_stdc\&.h\&.
.PP
Referenced by Translate()\&.
.SS "char* StandardLanguage::identbase\fC [private]\fP"

.PP
Definition at line 62 of file language_stdc\&.h\&.
.PP
Referenced by ~StandardLanguage()\&.
.SS "\fBidenthelpdef\fP* StandardLanguage::identcatalog\fC [private]\fP"

.PP
Definition at line 68 of file language_stdc\&.h\&.
.PP
Referenced by Translate()\&.
.SS "char* StandardLanguage::kwordbase\fC [private]\fP"

.PP
Definition at line 63 of file language_stdc\&.h\&.
.PP
Referenced by ~StandardLanguage()\&.
.SS "char* StandardLanguage::ptr\fC [private]\fP"

.PP
Definition at line 65 of file language_stdc\&.h\&.
.PP
Referenced by GetNextLine(), GetNextPair(), LoadCatalog(), and SkipComments()\&.
.SS "char* StandardLanguage::textbase\fC [private]\fP"

.PP
Definition at line 60 of file language_stdc\&.h\&.
.PP
Referenced by ~StandardLanguage()\&.
.SS "\fBtextdef\fP* StandardLanguage::textcatalog\fC [private]\fP"

.PP
Definition at line 66 of file language_stdc\&.h\&.
.PP
Referenced by Translate()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
