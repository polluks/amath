.TH "lib/cplex/prim.c" 3 "Thu Jan 19 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/cplex/prim.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'math\&.h'\fP
.br
\fC#include 'prim\&.h'\fP
.br
\fC#include 'complex\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBREAL_PART\fP(z)   ((z)\&.parts[0])"
.br
.ti -1c
.RI "#define \fBIMAG_PART\fP(z)   ((z)\&.parts[1])"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBcreal\fP (\fBcomplex\fP z)"
.br
.RI "\fIReal part of complex number\&. \fP"
.ti -1c
.RI "double \fBcimag\fP (\fBcomplex\fP z)"
.br
.RI "\fIImaginary part of complex number\&. \fP"
.ti -1c
.RI "double \fBcabs\fP (\fBcomplex\fP z)"
.br
.RI "\fIAbsolute value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBconj\fP (\fBcomplex\fP z)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBcpack\fP (double x, double y)"
.br
.RI "\fIPack two real numbers into a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBctrunc\fP (\fBcomplex\fP z)"
.br
.RI "\fITruncated value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcfloor\fP (\fBcomplex\fP z)"
.br
.RI "\fIFloor value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcceil\fP (\fBcomplex\fP z)"
.br
.RI "\fICeiling value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcround\fP (\fBcomplex\fP z)"
.br
.RI "\fIDivision of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcadd\fP (\fBcomplex\fP y, \fBcomplex\fP z)"
.br
.RI "\fIAddition of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsub\fP (\fBcomplex\fP y, \fBcomplex\fP z)"
.br
.RI "\fISubtraction of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcmul\fP (\fBcomplex\fP y, \fBcomplex\fP z)"
.br
.RI "\fIMultiplication of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcdiv\fP (\fBcomplex\fP y, \fBcomplex\fP z)"
.br
.RI "\fIDivision of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcreci\fP (\fBcomplex\fP z)"
.br
.RI "\fIReciprocal value of complex number\&. \fP"
.ti -1c
.RI "void \fBcchsh\fP (double x, double *c, double *s)"
.br
.RI "\fICalculate cosh and sinh\&. \fP"
.ti -1c
.RI "void \fBcchc\fP (double x, double *ch, double *c)"
.br
.RI "\fICalculate cosh and cos\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define IMAG_PART(z)   ((z)\&.parts[1])"

.PP
Definition at line 32 of file prim\&.c\&.
.SS "#define REAL_PART(z)   ((z)\&.parts[0])"

.PP
Definition at line 31 of file prim\&.c\&.
.SH "Function Documentation"
.PP 
.SS "double cabs (\fBcomplex\fP z)"

.PP
Absolute value of complex number\&. 
.PP
Definition at line 56 of file prim\&.c\&.
.PP
References cimag(), creal(), and hypot()\&.
.PP
Referenced by ComplexNumber::Absolute(), clog(), cpow(), and csqrt()\&.
.PP
.nf
57 {
58     return hypot(creal(z), cimag(z));
59 }
.fi
.SS "\fBcomplex\fP cadd (\fBcomplex\fP y, \fBcomplex\fP z)"

.PP
Addition of two complex numbers\&. 
.PP
Definition at line 128 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Add(), cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), catan(), and catanh()\&.
.PP
.nf
129 {
130     complex w;
131     w = cpack(creal(y) + creal(z), cimag(y) + cimag(z));
132     return w;
133 }
.fi
.SS "\fBcomplex\fP cceil (\fBcomplex\fP z)"

.PP
Ceiling value of complex number\&. 
.PP
Definition at line 106 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Ceiling()\&.
.PP
.nf
107 {
108     complex w;
109     w = cpack(ceil(creal(z)), ceil(cimag(z)));
110     return w;
111 }
.fi
.SS "void cchc (double x, double * ch, double * c)"

.PP
Calculate cosh and cos\&. 
.PP
Definition at line 230 of file prim\&.c\&.
.PP
References cos(), and cosh()\&.
.PP
.nf
231 {
232     *ch = cosh(2\&.0 * x);
233     *c = cos(2\&.0 * x);
234 }
.fi
.SS "void cchsh (double x, double * c, double * s)"

.PP
Calculate cosh and sinh\&. 
.PP
Definition at line 210 of file prim\&.c\&.
.PP
References cosh(), exp(), and sinh()\&.
.PP
Referenced by ccos(), ccosh(), csin(), and csinh()\&.
.PP
.nf
211 {
212     double e, ei;
213 
214     if (fabs(x) <= 0\&.5) {
215         *c = cosh(x);
216         *s = sinh(x);
217     } else {
218         e = exp(x);
219         ei = 0\&.5 / e;
220         e = 0\&.5 * e;
221         *s = e - ei;
222         *c = e + ei;
223     }
224 }
.fi
.SS "\fBcomplex\fP cdiv (\fBcomplex\fP y, \fBcomplex\fP z)"

.PP
Division of two complex numbers\&. 
.PP
Definition at line 170 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacot(), cacsc(), casec(), catan(), clog10(), clogb(), and ComplexNumber::Div()\&.
.PP
.nf
171 {
172     complex w;
173     double a, b, c, d;
174     double q, v, x;
175 
176     a = creal(y);
177     b = cimag(y);
178     c = creal(z);
179     d = cimag(z);
180 
181     q = c * c + d * d;
182     v = a * c + b * d;
183     x = b * c - a * d;
184 
185     w = cpack(v / q, x / q);
186     return w;
187 }
.fi
.SS "\fBcomplex\fP cfloor (\fBcomplex\fP z)"

.PP
Floor value of complex number\&. 
.PP
Definition at line 95 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Floor()\&.
.PP
.nf
96 {
97     complex w;
98     w = cpack(floor(creal(z)), floor(cimag(z)));
99     return w;
100 }
.fi
.SS "double cimag (\fBcomplex\fP z)"

.PP
Imaginary part of complex number\&. 
.PP
Definition at line 47 of file prim\&.c\&.
.PP
Referenced by cabs(), cadd(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), cmul(), cpow(), creci(), cround(), csec(), csech(), csgn(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::GetDefaultPrecedence(), ComplexNumber::GetImagValue(), ComplexNumber::GetPrecedence(), PositionalNumeralSystem::GetText(), DecimalSystem::GetText(), and ComplexNumber::Unary()\&.
.PP
.nf
48 {
49     return (IMAG_PART(z));
50 }
.fi
.SS "\fBcomplex\fP cmul (\fBcomplex\fP y, \fBcomplex\fP z)"

.PP
Multiplication of two complex numbers\&. 
.PP
Definition at line 150 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), catan(), catanh(), ccbrt(), and ComplexNumber::Mul()\&.
.PP
.nf
151 {
152     complex w;
153     double a, b, c, d;
154 
155     // (a+bi)(c+di)
156     a = creal(y);
157     b = cimag(y);
158     c = creal(z);
159     d = cimag(z);
160 
161     // (ac -bd) + (ad + bc)i
162     w = cpack(a * c - b * d, a * d + b * c);
163     return w;
164 }
.fi
.SS "\fBcomplex\fP conj (\fBcomplex\fP z)"

.PP
Definition at line 61 of file prim\&.c\&.
.PP
References cpack()\&.
.PP
Referenced by creci()\&.
.PP
.nf
62 {
63     IMAG_PART(z) = -IMAG_PART(z);
64     return cpack(REAL_PART(z), IMAG_PART(z));
65 }
.fi
.SS "\fBcomplex\fP cpack (double x, double y)"

.PP
Pack two real numbers into a complex number\&. 
.PP
Definition at line 71 of file prim\&.c\&.
.PP
Referenced by ComplexNumber::Add(), cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), cadd(), casec(), casech(), casin(), casinh(), catan(), catanh(), ccbrt(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), clog10(), clogb(), cmul(), ComplexNumber::ComplexNumber(), conj(), cpow(), creci(), cround(), csec(), csech(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::Div(), ComplexNumber::Mul(), ComplexNumber::Raise(), ComplexNumber::Sub(), and ComplexNumber::Unary()\&.
.PP
.nf
72 {
73     complex z;
74 
75     REAL_PART(z) = x;
76     IMAG_PART(z) = y;
77     return (z);
78 }
.fi
.SS "double creal (\fBcomplex\fP z)"

.PP
Real part of complex number\&. 
.PP
Definition at line 38 of file prim\&.c\&.
.PP
Referenced by cabs(), cadd(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), cmul(), cpow(), creci(), cround(), csec(), csech(), csgn(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::GetDefaultPrecedence(), ComplexNumber::GetIntegerValue(), ComplexNumber::GetPrecedence(), ComplexNumber::GetRealValue(), PositionalNumeralSystem::GetText(), DecimalSystem::GetText(), ComplexNumber::PureComplexValue(), and ComplexNumber::Unary()\&.
.PP
.nf
39 {
40     return (REAL_PART(z));
41 }
.fi
.SS "\fBcomplex\fP creci (\fBcomplex\fP z)"

.PP
Reciprocal value of complex number\&. 
.PP
Definition at line 193 of file prim\&.c\&.
.PP
References cimag(), conj(), cpack(), and creal()\&.
.PP
Referenced by cacsch(), casec(), casech(), and ComplexNumber::Reciprocal()\&.
.PP
.nf
194 {
195     complex w;
196     double q, a, b;
197 
198     a = creal(z);
199     b = cimag(conj(z));
200     q = a * a + b * b;
201     w = cpack(a / q, b / q);
202 
203     return w;
204 }
.fi
.SS "\fBcomplex\fP cround (\fBcomplex\fP z)"

.PP
Division of two complex numbers\&. 
.PP
Definition at line 117 of file prim\&.c\&.
.PP
References cimag(), cpack(), creal(), and round()\&.
.PP
Referenced by ComplexNumber::Round()\&.
.PP
.nf
118 {
119     complex w;
120     w = cpack(round(creal(z)), round(cimag(z)));
121     return w;
122 }
.fi
.SS "\fBcomplex\fP csub (\fBcomplex\fP y, \fBcomplex\fP z)"

.PP
Subtraction of two complex numbers\&. 
.PP
Definition at line 139 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacos(), cacosh(), cacot(), cacoth(), cacsc(), casec(), casech(), casin(), catan(), catanh(), and ComplexNumber::Sub()\&.
.PP
.nf
140 {
141     complex w;
142     w = cpack(creal(y) - creal(z), cimag(y) - cimag(z));
143     return w;
144 }
.fi
.SS "\fBcomplex\fP ctrunc (\fBcomplex\fP z)"

.PP
Truncated value of complex number\&. 
.PP
Definition at line 84 of file prim\&.c\&.
.PP
References cimag(), cpack(), creal(), and trunc()\&.
.PP
Referenced by ComplexNumber::Trunc()\&.
.PP
.nf
85 {
86     complex w;
87     w = cpack(trunc(creal(z)), trunc(cimag(z)));
88     return w;
89 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
