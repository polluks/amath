.TH "lib/real/ksin.c" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/ksin.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fB__kernel_sin\fP (double x, double y, int iy)"
.br
.RI "\fIKernel sin function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBhalf\fP = 5\&.00000000000000000000e\-01"
.br
.ti -1c
.RI "static const double \fBS1\fP = \-1\&.66666666666666324348e\-01"
.br
.ti -1c
.RI "static const double \fBS2\fP = 8\&.33333333332248946124e\-03"
.br
.ti -1c
.RI "static const double \fBS3\fP = \-1\&.98412698298579493134e\-04"
.br
.ti -1c
.RI "static const double \fBS4\fP = 2\&.75573137070700676789e\-06"
.br
.ti -1c
.RI "static const double \fBS5\fP = \-2\&.50507602534068634195e\-08"
.br
.ti -1c
.RI "static const double \fBS6\fP = 1\&.58969099521155010221e\-10"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double __kernel_sin (double x, double y, int iy)"

.PP
Kernel sin function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
Kernel sin function on [-pi/4, pi/4], pi/4 ~ 0\&.7854 Input x is assumed to be bounded by ~pi/4 in magnitude\&. Input y is the tail of x\&. Input iy indicates whether y is 0\&. (if iy=0, y assume to be 0)\&.
.PP
Algorithm
.IP "1." 4
Since sin(-x) = -sin(x), we need only to consider positive x\&.
.IP "2." 4
if x < 2^-27 (hx<0x3e400000 0), return x with inexact if x!=0\&.
.IP "3." 4
sin(x) is approximated by a polynomial of degree 13 on [0,pi/4] 3 13 sin(x) ~ x + S1*x + \&.\&.\&. + S6*x where
.PP
|sin(x) 2 4 6 8 10 12 | -58 |----- - (1+S1*x +S2*x +S3*x +S4*x +S5*x +S6*x )| <= 2 | x |
.IP "4." 4
sin(x+y) = sin(x) + sin'(x')*y ~ sin(x) + (1-x*x/2)*y For better accuracy, let 3 2 2 2 2 r = x *(S2+x *(S3+x *(S4+x *(S5+x *S6)))) then 3 2 sin(x) = x + (S1*x + (x *(r-y/2)+y))  
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP

.PP
Definition at line 92 of file ksin\&.c\&.
.PP
References half, S1, S2, S3, S4, S5, and S6\&.
.PP
Referenced by cos(), and sin()\&.
.PP
.nf
93 {
94     double z,r,v;
95     sword ix;
96     GET_HIGH_WORD(ix,x);
97     ix &=0x7fffffff;    /* high word of x */
98     if(ix<0x3e400000)           /* |x| < 2**-27 */
99     {
100         if((int)x==0) return x;   /* generate inexact */
101     }
102     z   =  x*x;
103     v   =  z*x;
104     r   =  S2+z*(S3+z*(S4+z*(S5+z*S6)));
105     if(iy==0) return x+v*(S1+z*r);
106     else      return x-((z*(half*y-v*r)-y)-v*S1);
107 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double half = 5\&.00000000000000000000e\-01\fC [static]\fP"

.PP
Definition at line 46 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S1 = \-1\&.66666666666666324348e\-01\fC [static]\fP"

.PP
Definition at line 47 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S2 = 8\&.33333333332248946124e\-03\fC [static]\fP"

.PP
Definition at line 48 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S3 = \-1\&.98412698298579493134e\-04\fC [static]\fP"

.PP
Definition at line 49 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S4 = 2\&.75573137070700676789e\-06\fC [static]\fP"

.PP
Definition at line 50 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S5 = \-2\&.50507602534068634195e\-08\fC [static]\fP"

.PP
Definition at line 51 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SS "const double S6 = 1\&.58969099521155010221e\-10\fC [static]\fP"

.PP
Definition at line 52 of file ksin\&.c\&.
.PP
Referenced by __kernel_sin()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
