.TH "RealNumber" 3 "Sat Jan 21 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RealNumber \- Represent a real number with 15 siginificant digits\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <real\&.h>\fP
.PP
Inherits \fBNumber\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRealNumber\fP ()"
.br
.ti -1c
.RI "\fBRealNumber\fP (double \fBx\fP)"
.br
.ti -1c
.RI "\fBRealNumber\fP (signed int i)"
.br
.ti -1c
.RI "\fBRealNumber\fP (unsigned int i)"
.br
.ti -1c
.RI "\fB~RealNumber\fP ()"
.br
.ti -1c
.RI "int \fBIsNaN\fP ()"
.br
.ti -1c
.RI "int \fBIsFinite\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBClone\fP ()"
.br
.ti -1c
.RI "int \fBGetIntegerValue\fP ()"
.br
.ti -1c
.RI "double \fBGetRealValue\fP ()"
.br
.ti -1c
.RI "void \fBSetRealValue\fP (double value)"
.br
.ti -1c
.RI "\fBbool\fP \fBPureComplexValue\fP ()"
.br
.ti -1c
.RI "int \fBGetPrecedence\fP ()"
.br
.ti -1c
.RI "int \fBGetDefaultPrecedence\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBUnary\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBAdd\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBSub\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBMul\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBDiv\fP (\fBNumber\fP *other)"
.br
.ti -1c
.RI "\fBNumber\fP * \fBRaise\fP (\fBNumber\fP *exponent)"
.br
.RI "\fIExpontation function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBSignum\fP ()"
.br
.RI "\fIMathematical sign function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBTrunc\fP ()"
.br
.RI "\fIMathematical trunc function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBRound\fP ()"
.br
.RI "\fIMathematical round function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBFloor\fP ()"
.br
.RI "\fIMathematical floor function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBCeiling\fP ()"
.br
.RI "\fIMathematical ceiling function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBAbsolute\fP ()"
.br
.RI "\fIAbsolute value of number\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBSquareRoot\fP ()"
.br
.RI "\fISquare root function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBCubeRoot\fP ()"
.br
.RI "\fICube root function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBReciprocal\fP ()"
.br
.ti -1c
.RI "\fBNumber\fP * \fBLog\fP ()"
.br
.RI "\fINatural logarithm function (base e)\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBLog2\fP ()"
.br
.RI "\fIBinary logarithm function (base 2)\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBLog10\fP ()"
.br
.RI "\fIBase 10 logarithm function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBSine\fP ()"
.br
.RI "\fITrigonometric sine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBCosine\fP ()"
.br
.RI "\fITrigonometric cosine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBTangent\fP ()"
.br
.RI "\fITrigonometric tangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBCosecant\fP ()"
.br
.RI "\fITrigonometric cosecant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBSecant\fP ()"
.br
.RI "\fITrigonometric secant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBCotangent\fP ()"
.br
.RI "\fITrigonometric cotangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcSine\fP ()"
.br
.RI "\fIInverse trigonometric sine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcCosine\fP ()"
.br
.RI "\fIInverse trigonometric cosine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcTangent\fP ()"
.br
.RI "\fIInverse trigonometric tangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcCosecant\fP ()"
.br
.RI "\fIInverse trigonometric cosecant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcSecant\fP ()"
.br
.RI "\fIInverse trigonometric secant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBArcCotangent\fP ()"
.br
.RI "\fIInverse trigonometric cotangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypSine\fP ()"
.br
.RI "\fIHyperbolic sine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypCosine\fP ()"
.br
.RI "\fIHyperbolic cosine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypTangent\fP ()"
.br
.RI "\fIHyperbolic tangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypCosecant\fP ()"
.br
.RI "\fIHyperbolic cosecant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypSecant\fP ()"
.br
.RI "\fIHyperbolic secant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypCotangent\fP ()"
.br
.RI "\fIHyperbolic cotangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcSine\fP ()"
.br
.RI "\fIInverse hyperbolic sine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCosine\fP ()"
.br
.RI "\fIInverse hyperbolic cosine function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcTangent\fP ()"
.br
.RI "\fIInverse hyperbolic tangent function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCosecant\fP ()"
.br
.RI "\fIInverse hyperbolic cosecant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcSecant\fP ()"
.br
.RI "\fIInverse hyperbolic secant function\&. \fP"
.ti -1c
.RI "\fBNumber\fP * \fBHypArcCotangent\fP ()"
.br
.RI "\fIInverse hyperbolic cotangent function\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBx\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "struct \fBComplexNumber\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Represent a real number with 15 siginificant digits\&. 

Calculations are done using 64 bit IEEE 754 arithmetics\&. 
.PP
Definition at line 44 of file real\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "RealNumber::RealNumber ()"

.PP
Definition at line 33 of file real\&.cpp\&.
.PP
References nsysreal, Number::Number(), and x\&.
.PP
Referenced by PlotStatement::Execute(), Grid::Grid(), NumericValueNode::NumericValueNode(), PositionalNumeralSystem::Parse(), and Program::Program()\&.
.PP
.nf
33                        :
34     Number(nsysreal) {
35     x = 0;
36 }
.fi
.SS "RealNumber::RealNumber (double x)"

.PP
Definition at line 38 of file real\&.cpp\&.
.PP
References nsysreal, Number::Number(), and x\&.
.PP
Referenced by ComplexNumber::Absolute(), Absolute(), Add(), ArcCosecant(), ArcCosine(), ArcCotangent(), ArcSecant(), ArcSine(), ArcTangent(), Ceiling(), Clone(), Cosecant(), Cosine(), Cotangent(), CubeRoot(), Div(), EulersNumberNode::EulersNumberNode(), Floor(), PositionalNumeralSystem::GetName(), HypArcCosecant(), HypArcCosine(), HypArcCotangent(), HypArcSecant(), HypArcSine(), HypArcTangent(), HypCosecant(), HypCosine(), HypCotangent(), HypSecant(), HypSine(), HypTangent(), Log(), Log10(), Log2(), Mul(), PositionalNumeralSystem::Parse(), PiNode::PiNode(), Raise(), Reciprocal(), Round(), Secant(), ComplexNumber::Signum(), Signum(), Sine(), SquareRoot(), Sub(), Tangent(), Trunc(), and Unary()\&.
.PP
.nf
38                                :
39     Number(nsysreal) {
40     this->x = x;
41 }
.fi
.SS "RealNumber::RealNumber (signed int i)"

.PP
Definition at line 43 of file real\&.cpp\&.
.PP
References nsysreal, Number::Number(), and x\&.
.PP
Referenced by MemoryStatement::Execute(), and PreferencesBase::GetDescription()\&.
.PP
.nf
43                                    :
44     Number(nsysreal) {
45     x = i * 1\&.0;
46 }
.fi
.SS "RealNumber::RealNumber (unsigned int i)"

.PP
Definition at line 48 of file real\&.cpp\&.
.PP
References nsysreal, Number::Number(), and x\&.
.PP
Referenced by DigitsStatement::Execute()\&.
.PP
.nf
48                                      :
49     Number(nsysreal) {
50     x = i * 1\&.0;
51 }
.fi
.SS "RealNumber::~RealNumber ()"

.PP
Definition at line 53 of file real\&.cpp\&.
.PP
.nf
54 { }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBNumber\fP * RealNumber::Absolute ()\fC [virtual]\fP"

.PP
Absolute value of number\&. See implementation in \fBfabs(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 224 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
225 {
226     return new RealNumber(fabs(x));
227 }
.fi
.SS "\fBNumber\fP * RealNumber::Add (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 106 of file real\&.cpp\&.
.PP
References Number::Add(), nsysreal, RealNumber(), Number::system, and x\&.
.PP
.nf
107 {
108     if (other->system == nsysreal) {
109         RealNumber *a = (RealNumber*)other;
110         return new RealNumber(x + a->x);
111     } else {
112         return other->Add(this);
113     }
114 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcCosecant ()\fC [virtual]\fP"

.PP
Inverse trigonometric cosecant function\&. See implementation of inverse trigonometric sine in \fBasin(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 467 of file real\&.cpp\&.
.PP
References asin(), RealNumber(), and x\&.
.PP
.nf
468 {
469     return new RealNumber(asin(1\&.0/x));
470 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcCosine ()\fC [virtual]\fP"

.PP
Inverse trigonometric cosine function\&. See implementation of inverse trigonometric cosine in \fBacos(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 417 of file real\&.cpp\&.
.PP
References acos(), RealNumber(), and x\&.
.PP
.nf
418 {
419     return new RealNumber(acos(x));
420 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcCotangent ()\fC [virtual]\fP"

.PP
Inverse trigonometric cotangent function\&. See implementation of inverse trigonometric tangent in \fBatan(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 447 of file real\&.cpp\&.
.PP
References atan(), RealNumber(), and x\&.
.PP
.nf
448 {
449     return new RealNumber(atan(1\&.0/x));
450 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcSecant ()\fC [virtual]\fP"

.PP
Inverse trigonometric secant function\&. See implementation of inverse trigonometric cosine in \fBacos(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 427 of file real\&.cpp\&.
.PP
References acos(), RealNumber(), and x\&.
.PP
.nf
428 {
429     return new RealNumber(acos(1\&.0/x));
430 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcSine ()\fC [virtual]\fP"

.PP
Inverse trigonometric sine function\&. See implementation of inverse trigonometric sine in \fBasin(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 457 of file real\&.cpp\&.
.PP
References asin(), RealNumber(), and x\&.
.PP
.nf
458 {
459     return new RealNumber(asin(x));
460 }
.fi
.SS "\fBNumber\fP * RealNumber::ArcTangent ()\fC [virtual]\fP"

.PP
Inverse trigonometric tangent function\&. See implementation of inverse trigonometric tangent in \fBatan(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 437 of file real\&.cpp\&.
.PP
References atan(), RealNumber(), and x\&.
.PP
.nf
438 {
439     return new RealNumber(atan(x));
440 }
.fi
.SS "\fBNumber\fP * RealNumber::Ceiling ()\fC [virtual]\fP"

.PP
Mathematical ceiling function\&. See implementation in \fBceil(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 214 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
215 {
216     return new RealNumber(ceil(x));
217 }
.fi
.SS "\fBNumber\fP * RealNumber::Clone ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 56 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
57 {
58     return new RealNumber(x);
59 }
.fi
.SS "\fBNumber\fP * RealNumber::Cosecant ()\fC [virtual]\fP"

.PP
Trigonometric cosecant function\&. See implementation of sine function in \fBsin(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 407 of file real\&.cpp\&.
.PP
References RealNumber(), sin(), and x\&.
.PP
.nf
408 {
409     return new RealNumber(1\&.0/sin(x));
410 }
.fi
.SS "\fBNumber\fP * RealNumber::Cosine ()\fC [virtual]\fP"

.PP
Trigonometric cosine function\&. See implementation of cosine function in \fBcos(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 297 of file real\&.cpp\&.
.PP
References cos(), RealNumber(), and x\&.
.PP
.nf
298 {
299     return new RealNumber(cos(x));
300 }
.fi
.SS "\fBNumber\fP * RealNumber::Cotangent ()\fC [virtual]\fP"

.PP
Trigonometric cotangent function\&. See implementation of tangent function in \fBtan(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 327 of file real\&.cpp\&.
.PP
References RealNumber(), tan(), and x\&.
.PP
.nf
328 {
329     return new RealNumber(1\&.0/tan(x));
330 }
.fi
.SS "\fBNumber\fP * RealNumber::CubeRoot ()\fC [virtual]\fP"

.PP
Cube root function\&. See implementation of cube root in \fBcbrt(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 251 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
252 {
253     return new RealNumber(cbrt(x));
254 }
.fi
.SS "\fBNumber\fP * RealNumber::Div (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 139 of file real\&.cpp\&.
.PP
References Mul(), nsysreal, RealNumber(), Number::Reciprocal(), Number::system, and x\&.
.PP
.nf
140 {
141     if (other->system == nsysreal) {
142         RealNumber *a = (RealNumber*)other;
143         return new RealNumber(x / a->x);
144     } else {
145         Number *y = other->Reciprocal();
146         Number *q = Mul(y);
147         delete y;
148         return q;
149     }
150 }
.fi
.SS "\fBNumber\fP * RealNumber::Floor ()\fC [virtual]\fP"

.PP
Mathematical floor function\&. See implementation in \fBfloor(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 204 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
205 {
206     return new RealNumber(floor(x));
207 }
.fi
.SS "int RealNumber::GetDefaultPrecedence ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 86 of file real\&.cpp\&.
.PP
.nf
87 {
88     return 0;
89 }
.fi
.SS "int RealNumber::GetIntegerValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 61 of file real\&.cpp\&.
.PP
References x\&.
.PP
.nf
62 {
63     return (int) x;
64 }
.fi
.SS "int RealNumber::GetPrecedence ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 81 of file real\&.cpp\&.
.PP
References x\&.
.PP
.nf
82 {
83     return (x < 0\&.0) ? -1 : 0;
84 }
.fi
.SS "double RealNumber::GetRealValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 66 of file real\&.cpp\&.
.PP
References x\&.
.PP
.nf
67 {
68     return x;
69 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcCosecant ()\fC [virtual]\fP"

.PP
Inverse hyperbolic cosecant function\&. See implementation of inverse hyperbolic sine in \fBasinh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 507 of file real\&.cpp\&.
.PP
References asinh(), RealNumber(), and x\&.
.PP
.nf
508 {
509     return new RealNumber(asinh(1\&.0/x));
510 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcCosine ()\fC [virtual]\fP"

.PP
Inverse hyperbolic cosine function\&. See implementation of inverse hyperbolic cosine in \fBacosh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 477 of file real\&.cpp\&.
.PP
References acosh(), RealNumber(), and x\&.
.PP
.nf
478 {
479     return new RealNumber(acosh(x));
480 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcCotangent ()\fC [virtual]\fP"

.PP
Inverse hyperbolic cotangent function\&. See implementation hyperbolic tangent in \fBatanh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 527 of file real\&.cpp\&.
.PP
References atanh(), RealNumber(), and x\&.
.PP
.nf
528 {
529     return new RealNumber(atanh(1\&.0/x));
530 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcSecant ()\fC [virtual]\fP"

.PP
Inverse hyperbolic secant function\&. See implementation of inverse hyperbolic cosine in \fBacosh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 487 of file real\&.cpp\&.
.PP
References acosh(), RealNumber(), and x\&.
.PP
.nf
488 {
489     return new RealNumber(acosh(1\&.0/x));
490 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcSine ()\fC [virtual]\fP"

.PP
Inverse hyperbolic sine function\&. See implementation of inverse hyperbolic sine in \fBasinh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 497 of file real\&.cpp\&.
.PP
References asinh(), RealNumber(), and x\&.
.PP
.nf
498 {
499     return new RealNumber(asinh(x));
500 }
.fi
.SS "\fBNumber\fP * RealNumber::HypArcTangent ()\fC [virtual]\fP"

.PP
Inverse hyperbolic tangent function\&. See implementation hyperbolic tangent in \fBatanh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 517 of file real\&.cpp\&.
.PP
References atanh(), RealNumber(), and x\&.
.PP
.nf
518 {
519     return new RealNumber(atanh(x));
520 }
.fi
.SS "\fBNumber\fP * RealNumber::HypCosecant ()\fC [virtual]\fP"

.PP
Hyperbolic cosecant function\&. See implementation of hyperbolic sine function in \fBsinh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 347 of file real\&.cpp\&.
.PP
References RealNumber(), sinh(), and x\&.
.PP
.nf
348 {
349     return new RealNumber(1\&.0/sinh(x));
350 }
.fi
.SS "\fBNumber\fP * RealNumber::HypCosine ()\fC [virtual]\fP"

.PP
Hyperbolic cosine function\&. See implementation of hyperbolic cosine function in \fBcosh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 357 of file real\&.cpp\&.
.PP
References cosh(), RealNumber(), and x\&.
.PP
.nf
358 {
359     return new RealNumber(cosh(x));
360 }
.fi
.SS "\fBNumber\fP * RealNumber::HypCotangent ()\fC [virtual]\fP"

.PP
Hyperbolic cotangent function\&. See implementation of hyperbolic tangent function in \fBtanh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 387 of file real\&.cpp\&.
.PP
References RealNumber(), tanh(), and x\&.
.PP
.nf
388 {
389     return new RealNumber(1\&.0/tanh(x));
390 }
.fi
.SS "\fBNumber\fP * RealNumber::HypSecant ()\fC [virtual]\fP"

.PP
Hyperbolic secant function\&. See implementation of hyperbolic cosine function in \fBcosh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 367 of file real\&.cpp\&.
.PP
References cosh(), RealNumber(), and x\&.
.PP
.nf
368 {
369     return new RealNumber(1\&.0/cosh(x));
370 }
.fi
.SS "\fBNumber\fP * RealNumber::HypSine ()\fC [virtual]\fP"

.PP
Hyperbolic sine function\&. See implementation of hyperbolic sine function in \fBsinh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 337 of file real\&.cpp\&.
.PP
References RealNumber(), sinh(), and x\&.
.PP
.nf
338 {
339     return new RealNumber(sinh(x));
340 }
.fi
.SS "\fBNumber\fP * RealNumber::HypTangent ()\fC [virtual]\fP"

.PP
Hyperbolic tangent function\&. See implementation of hyperbolic tangent function in \fBtanh(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 377 of file real\&.cpp\&.
.PP
References RealNumber(), tanh(), and x\&.
.PP
.nf
378 {
379     return new RealNumber(tanh(x));
380 }
.fi
.SS "int RealNumber::IsFinite ()"

.PP
Definition at line 91 of file real\&.cpp\&.
.PP
References finite(), and x\&.
.PP
.nf
92 {
93     return finite(x);
94 }
.fi
.SS "int RealNumber::IsNaN ()"

.PP
Definition at line 96 of file real\&.cpp\&.
.PP
References isnan(), and x\&.
.PP
.nf
97 {
98     return isnan(x);
99 }
.fi
.SS "\fBNumber\fP * RealNumber::Log ()\fC [virtual]\fP"

.PP
Natural logarithm function (base e)\&. See implementation of natural logarithm in \fBlog(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 277 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
278 {
279     return new RealNumber(log(x));
280 }
.fi
.SS "\fBNumber\fP * RealNumber::Log10 ()\fC [virtual]\fP"

.PP
Base 10 logarithm function\&. See implementation of base 10 logarithm in \fBlog10(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 287 of file real\&.cpp\&.
.PP
References log10(), RealNumber(), and x\&.
.PP
.nf
288 {
289     return new RealNumber(log10(x));
290 }
.fi
.SS "\fBNumber\fP * RealNumber::Log2 ()\fC [virtual]\fP"

.PP
Binary logarithm function (base 2)\&. See implementation of natural logarithm in \fBlog(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 267 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
268 {
269     return new RealNumber(log(x)/log(2\&.0));
270 }
.fi
.SS "\fBNumber\fP * RealNumber::Mul (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 129 of file real\&.cpp\&.
.PP
References Number::Mul(), nsysreal, RealNumber(), Number::system, and x\&.
.PP
Referenced by Div()\&.
.PP
.nf
130 {
131     if (other->system == nsysreal) {
132         RealNumber *a = (RealNumber*)other;
133         return new RealNumber(x * a->x);
134     } else {
135         return other->Mul(this);
136     }
137 }
.fi
.SS "\fBbool\fP RealNumber::PureComplexValue ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 76 of file real\&.cpp\&.
.PP
.nf
77 {
78     return false;
79 }
.fi
.SS "\fBNumber\fP * RealNumber::Raise (\fBNumber\fP * exponent)\fC [virtual]\fP"

.PP
Expontation function\&. See implementation in \fBpow(double, double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 157 of file real\&.cpp\&.
.PP
References ComplexNumber::ComplexNumber(), nsysreal, pow(), ComplexNumber::Raise(), RealNumber(), Number::system, and x\&.
.PP
.nf
158 {
159     if (exponent->system == nsysreal) {
160         return new RealNumber(pow(x, ((RealNumber*)exponent)->x));
161     } else {
162         ComplexNumber *y = new ComplexNumber(x, 0\&.0);
163         Number *q = y->Raise(exponent);
164         delete y;
165         return q;
166     }
167 }
.fi
.SS "\fBNumber\fP * RealNumber::Reciprocal ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 257 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
258 {
259     return new RealNumber(1/x);
260 }
.fi
.SS "\fBNumber\fP * RealNumber::Round ()\fC [virtual]\fP"

.PP
Mathematical round function\&. See implementation in \fBround(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 194 of file real\&.cpp\&.
.PP
References RealNumber(), round(), and x\&.
.PP
.nf
195 {
196     return new RealNumber(round(x));
197 }
.fi
.SS "\fBNumber\fP * RealNumber::Secant ()\fC [virtual]\fP"

.PP
Trigonometric secant function\&. See implementation of cosine function in \fBcos(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 307 of file real\&.cpp\&.
.PP
References cos(), RealNumber(), and x\&.
.PP
.nf
308 {
309     return new RealNumber(1\&.0/cos(x));
310 }
.fi
.SS "void RealNumber::SetRealValue (double value)"

.PP
Definition at line 71 of file real\&.cpp\&.
.PP
References x\&.
.PP
Referenced by PlotStatement::Execute(), and Grid::FunctionValue()\&.
.PP
.nf
72 {
73     x = value;
74 }
.fi
.SS "\fBNumber\fP * RealNumber::Signum ()\fC [virtual]\fP"

.PP
Mathematical sign function\&. See implementation in \fBsgn(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 174 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
175 {
176     return new RealNumber(sgn(x));
177 }
.fi
.SS "\fBNumber\fP * RealNumber::Sine ()\fC [virtual]\fP"

.PP
Trigonometric sine function\&. See implementation of sine function in \fBsin(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 397 of file real\&.cpp\&.
.PP
References RealNumber(), sin(), and x\&.
.PP
.nf
398 {
399     return new RealNumber(sin(x));
400 }
.fi
.SS "\fBNumber\fP * RealNumber::SquareRoot ()\fC [virtual]\fP"

.PP
Square root function\&. See implementation of square root in \fBsqrt(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 234 of file real\&.cpp\&.
.PP
References ComplexNumber::ComplexNumber(), RealNumber(), sqrt(), Number::SquareRoot(), and x\&.
.PP
.nf
235 {
236     if (x > 0\&.0) {
237         return new RealNumber(sqrt(x));
238     }
239 
240     Number *n = new ComplexNumber(x, 0);
241     Number *r = n->SquareRoot();
242     delete n;
243     return r;
244 }
.fi
.SS "\fBNumber\fP * RealNumber::Sub (\fBNumber\fP * other)\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 116 of file real\&.cpp\&.
.PP
References Number::Add(), nsysreal, RealNumber(), Number::system, Number::Unary(), and x\&.
.PP
.nf
117 {
118     if (other->system == nsysreal) {
119         RealNumber *a = (RealNumber*)other;
120         return new RealNumber(x - a->x);
121     } else {
122         Number *y = other->Unary();
123         Number *q = y->Add(this);
124         delete y;
125         return q;
126     }
127 }
.fi
.SS "\fBNumber\fP * RealNumber::Tangent ()\fC [virtual]\fP"

.PP
Trigonometric tangent function\&. See implementation of tangent function in \fBtan(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 317 of file real\&.cpp\&.
.PP
References RealNumber(), tan(), and x\&.
.PP
.nf
318 {
319     return new RealNumber(tan(x));
320 }
.fi
.SS "\fBNumber\fP * RealNumber::Trunc ()\fC [virtual]\fP"

.PP
Mathematical trunc function\&. See implementation in \fBtrunc(double)\fP 
.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 184 of file real\&.cpp\&.
.PP
References RealNumber(), trunc(), and x\&.
.PP
.nf
185 {
186     return new RealNumber(trunc(x));
187 }
.fi
.SS "\fBNumber\fP * RealNumber::Unary ()\fC [virtual]\fP"

.PP
Implements \fBNumber\fP\&.
.PP
Definition at line 101 of file real\&.cpp\&.
.PP
References RealNumber(), and x\&.
.PP
.nf
102 {
103     return new RealNumber(-x);
104 }
.fi
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend struct \fBComplexNumber\fP\fC [friend]\fP"

.PP
Definition at line 110 of file real\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "double RealNumber::x\fC [private]\fP"

.PP
Definition at line 113 of file real\&.h\&.
.PP
Referenced by Absolute(), ComplexNumber::Add(), Add(), ArcCosecant(), ArcCosine(), ArcCotangent(), ArcSecant(), ArcSine(), ArcTangent(), Ceiling(), Clone(), Cosecant(), Cosine(), Cotangent(), CubeRoot(), ComplexNumber::Div(), Div(), Floor(), GetIntegerValue(), GetPrecedence(), GetRealValue(), HypArcCosecant(), HypArcCosine(), HypArcCotangent(), HypArcSecant(), HypArcSine(), HypArcTangent(), HypCosecant(), HypCosine(), HypCotangent(), HypSecant(), HypSine(), HypTangent(), IsFinite(), IsNaN(), Log(), Log10(), Log2(), ComplexNumber::Mul(), Mul(), ComplexNumber::Raise(), Raise(), RealNumber(), Reciprocal(), Round(), Secant(), SetRealValue(), Signum(), Sine(), SquareRoot(), ComplexNumber::Sub(), Sub(), Tangent(), Trunc(), and Unary()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
