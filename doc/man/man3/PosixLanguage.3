.TH "PosixLanguage" 3 "Fri Jan 20 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PosixLanguage \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <language_posix\&.h>\fP
.PP
Inherits \fBLanguage\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPosixLanguage\fP ()"
.br
.ti -1c
.RI "\fB~PosixLanguage\fP ()"
.br
.ti -1c
.RI "char \fBGetFractionPoint\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsAlNum\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsAlpha\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsDigit\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsPunct\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsSpace\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBCharIsCntrl\fP (unsigned long character)"
.br
.ti -1c
.RI "\fBbool\fP \fBStrIsEqualLoc\fP (const char *s1, const char *s2)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "char * \fBTranslate\fP (\fBtextdef\fP *def)"
.br
.ti -1c
.RI "char * \fBTranslate\fP (\fBhelptextdef\fP *def)"
.br
.ti -1c
.RI "char * \fBTranslate\fP (\fBidenthelpdef\fP *def)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "locale_t \fBlocale\fP"
.br
.ti -1c
.RI "struct lconv * \fBconv\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 41 of file language_posix\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PosixLanguage::PosixLanguage ()"

.PP
Definition at line 45 of file language_posix\&.cpp\&.
.PP
References conv, Language::Language(), and locale\&.
.PP
Referenced by CreateLanguage()\&.
.PP
.nf
45                              :
46     Language()
47 {
48 //    locale = newlocale(LC_ALL, "da_DK\&.ISO8859-15", (locale_t)0);
49 //    setlocale(LC_NUMERIC, "da_DK\&.ISO8859-15");
50     locale = newlocale(LC_ALL, "", (locale_t)0);
51     setlocale(LC_NUMERIC, "");
52     conv = localeconv();
53 }
.fi
.SS "PosixLanguage::~PosixLanguage ()"

.PP
Definition at line 55 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
56 {
57     freelocale(locale);
58 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBbool\fP PosixLanguage::CharIsAlNum (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 60 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
61 {
62     return (bool)isalnum_l((int)character, locale);
63 }
.fi
.SS "\fBbool\fP PosixLanguage::CharIsAlpha (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 65 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
66 {
67     return (bool)isalpha_l((int)character, locale);
68 }
.fi
.SS "\fBbool\fP PosixLanguage::CharIsCntrl (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 70 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
71 {
72     return (bool)iscntrl_l((int)character, locale);
73 }
.fi
.SS "\fBbool\fP PosixLanguage::CharIsDigit (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 75 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
76 {
77     return (bool)isdigit_l((int)character, locale);
78 }
.fi
.SS "\fBbool\fP PosixLanguage::CharIsPunct (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 80 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
81 {
82     return (bool)ispunct_l((int)character, locale);
83 }
.fi
.SS "\fBbool\fP PosixLanguage::CharIsSpace (unsigned long character)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 85 of file language_posix\&.cpp\&.
.PP
References locale\&.
.PP
.nf
86 {
87     return (bool)isspace_l((int)character, locale);
88 }
.fi
.SS "char PosixLanguage::GetFractionPoint ()\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 90 of file language_posix\&.cpp\&.
.PP
References conv\&.
.PP
.nf
91 {
92     return *(conv->decimal_point);
93 }
.fi
.SS "\fBbool\fP PosixLanguage::StrIsEqualLoc (const char * s1, const char * s2)\fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 95 of file language_posix\&.cpp\&.
.PP
References StrIsEqual()\&.
.PP
.nf
96 {
97     size_t len = StrLen(s2) * 2;
98     char *tmp = new char[len];
99     strxfrm(tmp, s2, len);
100     bool res = StrIsEqual(s1, tmp);
101     delete [] tmp;
102     return res;
103 }
.fi
.SS "char * PosixLanguage::Translate (\fBtextdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 115 of file language_posix\&.cpp\&.
.PP
References textdef::text\&.
.PP
.nf
116 {
117     return (char*)def->text;
118 }
.fi
.SS "char * PosixLanguage::Translate (\fBhelptextdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 110 of file language_posix\&.cpp\&.
.PP
References helptextdef::text\&.
.PP
.nf
111 {
112     return (char*)def->text;
113 }
.fi
.SS "char * PosixLanguage::Translate (\fBidenthelpdef\fP * def)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBLanguage\fP\&.
.PP
Definition at line 105 of file language_posix\&.cpp\&.
.PP
References identhelpdef::text\&.
.PP
.nf
106 {
107     return (char*)def->text;
108 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "struct lconv* PosixLanguage::conv\fC [private]\fP"

.PP
Definition at line 61 of file language_posix\&.h\&.
.PP
Referenced by GetFractionPoint(), and PosixLanguage()\&.
.SS "locale_t PosixLanguage::locale\fC [private]\fP"

.PP
Definition at line 60 of file language_posix\&.h\&.
.PP
Referenced by CharIsAlNum(), CharIsAlpha(), CharIsCntrl(), CharIsDigit(), CharIsPunct(), CharIsSpace(), PosixLanguage(), and ~PosixLanguage()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
