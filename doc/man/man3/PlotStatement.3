.TH "PlotStatement" 3 "Fri Jan 20 2017" "Version 1.6.0" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PlotStatement \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <statements\&.h>\fP
.PP
Inherits \fBStatementNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPlotStatement\fP (const char *\fBname\fP, const char *\fBparameter\fP, const char *\fBfile\fP)"
.br
.ti -1c
.RI "\fBPlotStatement\fP (const char *\fBname\fP, const char *\fBparameter\fP)"
.br
.ti -1c
.RI "\fB~PlotStatement\fP ()"
.br
.ti -1c
.RI "char * \fBExecute\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fBname\fP"
.br
.ti -1c
.RI "char * \fBparameter\fP"
.br
.ti -1c
.RI "char * \fBfile\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 302 of file statements\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PlotStatement::PlotStatement (const char * name, const char * parameter, const char * file)"

.PP
Definition at line 756 of file statements\&.cpp\&.
.PP
References AllocAndCopy(), file, name, parameter, and StatementNode::StatementNode()\&.
.PP
.nf
756                                                                                       :
757     StatementNode()
758 {
759     AllocAndCopy(&this->name, name);
760     AllocAndCopy(&this->parameter, parameter);
761     AllocAndCopy(&this->file, file);
762 }
.fi
.SS "PlotStatement::PlotStatement (const char * name, const char * parameter)"

.PP
Definition at line 764 of file statements\&.cpp\&.
.PP
References AllocAndCopy(), file, name, parameter, and StatementNode::StatementNode()\&.
.PP
Referenced by Parser::ParseDrawStatement()\&.
.PP
.nf
764                                                                     :
765     StatementNode()
766 {
767     AllocAndCopy(&this->name, name);
768     AllocAndCopy(&this->parameter, parameter);
769     file = NOMEM;
770 }
.fi
.SS "PlotStatement::~PlotStatement ()"

.PP
Definition at line 772 of file statements\&.cpp\&.
.PP
References file, name, and parameter\&.
.PP
.nf
773 {
774     delete [] name;
775     delete [] parameter;
776 
777     if (file != NOMEM) {
778         delete [] file;
779     }
780 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "char * PlotStatement::Execute ()\fC [virtual]\fP"

.PP
Implements \fBStatementNode\fP\&.
.PP
Definition at line 782 of file statements\&.cpp\&.
.PP
References CharBuffer::Append(), DecimalSystem::DecimalSystem(), CharBuffer::Empty(), CharBuffer::EnsureGrowth(), Program::Functions, FunctionList::GetFunctionDef(), Grid::GetHorizontalResolution(), Grid::GetScreenCoordinates(), CharBuffer::GetString(), NumeralSystem::GetText(), Grid::Grid(), name, SyntaxNode::output, parameter, RealNumber::RealNumber(), Grid::SetFunctionBounderies(), RealNumber::SetRealValue(), and Grid::SetScreenBounderues()\&.
.PP
.nf
783 {
784     UserFunction *function = Program->Functions->GetFunctionDef(name, parameter);
785 
786     if (function == NOMEM) {
787         return (char*)("Function does not exists\&." NEWLINE);
788     }
789 
790     output->Empty();
791 
792     Grid *grid = new Grid(function);
793     static const int width = 400;
794     static const int height = 300;
795 
796     grid->SetScreenBounderues(0, width, 20, height);
797     bool first = true;
798 
799     static const double min = -5\&.0;
800     static const double max = +5\&.0;
801     grid->SetFunctionBounderies(min, max);
802 
803     double x = min;
804     double step = grid->GetHorizontalResolution();
805 
806     int screenX;
807     int screenY;
808 
809     RealNumber *n = new RealNumber();
810     NumeralSystem *ns = new DecimalSystem(5);
811 
812     while (x < max) {
813         grid->GetScreenCoordinates(x, &screenX, &screenY);
814 
815         output->EnsureGrowth(32);
816 
817         if (screenX != -1 && screenY != -1) {
818             if (first) {
819                 output->Append('(');
820                 n->SetRealValue(screenX);
821                 output->Append(ns->GetText(n));
822                 output->Append(',');
823                 n->SetRealValue(height - screenY);
824                 output->Append(ns->GetText(n));
825                 output->Append(')');
826                 output->Append(NEWLINE);
827                 first = false;
828             } else {
829                 output->Append('(');
830                 n->SetRealValue(screenX);
831                 output->Append(ns->GetText(n));
832                 output->Append(',');
833                 n->SetRealValue(height - screenY);
834                 output->Append(ns->GetText(n));
835                 output->Append(')');
836                 output->Append(NEWLINE);
837             }
838         }
839 
840         x = x + step;
841     }
842 
843     delete n;
844     delete ns;
845 
846     return output->GetString();
847 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "char* PlotStatement::file\fC [private]\fP"

.PP
Definition at line 312 of file statements\&.h\&.
.PP
Referenced by PlotStatement(), and ~PlotStatement()\&.
.SS "char* PlotStatement::name\fC [private]\fP"

.PP
Definition at line 310 of file statements\&.h\&.
.PP
Referenced by Execute(), PlotStatement(), and ~PlotStatement()\&.
.SS "char* PlotStatement::parameter\fC [private]\fP"

.PP
Definition at line 311 of file statements\&.h\&.
.PP
Referenced by Execute(), PlotStatement(), and ~PlotStatement()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
