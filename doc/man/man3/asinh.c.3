.TH "lib/real/asinh.c" 3 "Sat Jan 21 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/asinh.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBasinh\fP (double x)"
.br
.RI "\fIInverse hyperbolic sine function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP = 1\&.00000000000000000000e+00"
.br
.ti -1c
.RI "static const double \fBln2\fP = 6\&.93147180559945286227e\-01"
.br
.ti -1c
.RI "static const double \fBhuge\fP = 1\&.00000000000000000000e+300"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double asinh (double x)"

.PP
Inverse hyperbolic sine function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Method :
 Based on
    asinh(x) = sign(x) * log [ |x| + sqrt(x*x+1) ]
 we have
 asinh(x) := x  if  1+x*x=1,
     := sign(x)*(log(x)+ln2)) for large |x|, else
     := sign(x)*log(2|x|+1/(|x|+sqrt(x*x+1))) if|x|>2, else
     := sign(x)*log1p(|x| + x^2/(1 + sqrt(1+x^2)))
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 73 of file asinh\&.c\&.
.PP
References huge, ln2, log1p(), one, and sqrt()\&.
.PP
Referenced by RealNumber::HypArcCosecant(), and RealNumber::HypArcSine()\&.
.PP
.nf
74 {
75     double t,w;
76     sword hx,ix;
77     GET_HIGH_WORD(hx,x);
78     ix = hx&0x7fffffff;
79     if(ix>=0x7ff00000) return x+x;  /* x is inf or NaN */
80     if(ix< 0x3e300000) {    /* |x|<2**-28 */
81         if(huge+x>one) return x;    /* return x inexact except 0 */
82     }
83     if(ix>0x41b00000) { /* |x| > 2**28 */
84         w = log(fabs(x))+ln2;
85     } else if (ix>0x40000000) { /* 2**28 > |x| > 2\&.0 */
86         t = fabs(x);
87         w = log(2\&.0*t+one/(sqrt(x*x+one)+t));
88     } else {        /* 2\&.0 > |x| > 2**-28 */
89         t = x*x;
90         w =log1p(fabs(x)+t/(one+sqrt(one+t)));
91     }
92     if(hx>0) return w;
93     else return -w;
94 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double huge = 1\&.00000000000000000000e+300\fC [static]\fP"

.PP
Definition at line 50 of file asinh\&.c\&.
.PP
Referenced by asinh()\&.
.SS "const double ln2 = 6\&.93147180559945286227e\-01\fC [static]\fP"

.PP
Definition at line 49 of file asinh\&.c\&.
.PP
Referenced by asinh()\&.
.SS "const double one = 1\&.00000000000000000000e+00\fC [static]\fP"

.PP
Definition at line 48 of file asinh\&.c\&.
.PP
Referenced by asinh()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
