.TH "lib/real/acosh.c" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/real/acosh.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'prim\&.h'\fP
.br
\fC#include 'math\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBacosh\fP (double x)"
.br
.RI "\fIInverse hyperbolic cosine function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const double \fBone\fP = 1\&.0"
.br
.ti -1c
.RI "static const double \fBln2\fP = 6\&.93147180559945286227e\-01"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double acosh (double x)"

.PP
Inverse hyperbolic cosine function\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
95/01/18
.RE
.PP
.PP
.nf

Method :
 Based on
    acosh(x) = log [ x + sqrt(x*x-1) ]
 we have
    acosh(x) := log(x)+ln2, if x is large; else
    acosh(x) := log(2x-1/(sqrt(x*x-1)+x)) if x>2; else
    acosh(x) := log1p(t+sqrt(2\&.0*t+t*t)); where t=x-1\&.
.fi
.PP
.PP
.PP
.nf
Special cases:
 acosh(x) is NaN with signal if x<1\&.
 acosh(NaN) is NaN without signal\&.
.fi
.PP
 
.PP
\fBCopyright:\fP
.RS 4
Copyright (C) 1993 by Sun Microsystems, Inc\&. All rights reserved\&.  Developed at SunSoft, a Sun Microsystems, Inc\&. business\&. Permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved\&. 
.RE
.PP

.PP
Definition at line 75 of file acosh\&.c\&.
.PP
References ln2, log1p(), one, and sqrt()\&.
.PP
Referenced by RealNumber::HypArcCosine(), and RealNumber::HypArcSecant()\&.
.PP
.nf
76 {
77     double t;
78     sword hx, lx;
79     GET_HIGH_WORD(hx,x);
80     GET_LOW_WORD(lx,x);
81 
82     if(hx<0x3ff00000) {     /* x < 1 */
83         return (x-x)/(x-x);
84     } else if(hx >=0x41b00000) {    /* x > 2**28 */
85         if(hx >=0x7ff00000) {   /* x is inf of NaN */
86             return x+x;
87         } else
88             return log(x)+ln2;  /* acosh(huge)=log(2x) */
89     } else if(((hx-0x3ff00000)|lx)==0) {
90         return 0\&.0;          /* acosh(1) = 0 */
91     } else if (hx > 0x40000000) {   /* 2**28 > x > 2 */
92         t=x*x;
93         return log(2\&.0*x-one/(x+sqrt(t-one)));
94     } else {            /* 1<x<2 */
95         t = x-one;
96         return log1p(t+sqrt(2\&.0*t+t*t));
97     }
98 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const double ln2 = 6\&.93147180559945286227e\-01\fC [static]\fP"

.PP
Definition at line 49 of file acosh\&.c\&.
.PP
Referenced by acosh()\&.
.SS "const double one = 1\&.0\fC [static]\fP"

.PP
Definition at line 48 of file acosh\&.c\&.
.PP
Referenced by acosh()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
