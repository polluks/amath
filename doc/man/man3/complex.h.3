.TH "lib/complex.h" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/complex.h \- Functions in math library for handling complex numbers\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "union \fBcomplex\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBcsgn\fP (\fBcomplex\fP z)"
.br
.RI "\fIComplex signum\&. \fP"
.ti -1c
.RI "double \fBcabs\fP (\fBcomplex\fP z)"
.br
.RI "\fIAbsolute value of complex number\&. \fP"
.ti -1c
.RI "double \fBcreal\fP (\fBcomplex\fP z)"
.br
.RI "\fIReal part of complex number\&. \fP"
.ti -1c
.RI "double \fBcimag\fP (\fBcomplex\fP z)"
.br
.RI "\fIImaginary part of complex number\&. \fP"
.ti -1c
.RI "double \fBcarg\fP (\fBcomplex\fP z)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBcexp\fP (\fBcomplex\fP z)"
.br
.RI "\fIReturns e to the power of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBclog\fP (\fBcomplex\fP z)"
.br
.RI "\fINatural logarithm of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBconj\fP (\fBcomplex\fP z)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBcproj\fP (\fBcomplex\fP z)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBcsqrt\fP (\fBcomplex\fP z)"
.br
.RI "\fISquare root of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcpow\fP (\fBcomplex\fP x, \fBcomplex\fP z)"
.br
.RI "\fIComplex number raised to a power\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcpack\fP (double x, double y)"
.br
.RI "\fIPack two real numbers into a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcadd\fP (\fBcomplex\fP a, \fBcomplex\fP z)"
.br
.RI "\fIAddition of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsub\fP (\fBcomplex\fP a, \fBcomplex\fP z)"
.br
.RI "\fISubtraction of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcmul\fP (\fBcomplex\fP a, \fBcomplex\fP z)"
.br
.RI "\fIMultiplication of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcdiv\fP (\fBcomplex\fP a, \fBcomplex\fP z)"
.br
.RI "\fIDivision of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcceil\fP (\fBcomplex\fP z)"
.br
.RI "\fICeiling value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcfloor\fP (\fBcomplex\fP z)"
.br
.RI "\fIFloor value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBctrunc\fP (\fBcomplex\fP z)"
.br
.RI "\fITruncated value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcround\fP (\fBcomplex\fP z)"
.br
.RI "\fIDivision of two complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcreci\fP (\fBcomplex\fP z)"
.br
.RI "\fIReciprocal value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccbrt\fP (\fBcomplex\fP z)"
.br
.RI "\fICube root of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBclogb\fP (\fBcomplex\fP z)"
.br
.RI "\fIBase 2 logarithmic value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBclog10\fP (\fBcomplex\fP z)"
.br
.RI "\fIBase 10 logarithmic value of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccos\fP (\fBcomplex\fP z)"
.br
.RI "\fICosine of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsin\fP (\fBcomplex\fP z)"
.br
.RI "\fISine of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBctan\fP (\fBcomplex\fP z)"
.br
.RI "\fITangent of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsec\fP (\fBcomplex\fP z)"
.br
.RI "\fISecant of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccsc\fP (\fBcomplex\fP z)"
.br
.RI "\fICosecant of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccot\fP (\fBcomplex\fP z)"
.br
.RI "\fICotangent of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacos\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse cosine of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcasin\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse sine of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcatan\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse tangent of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcasec\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse secant expressed using complex logarithms: \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacsc\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse cosecant of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacot\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse cotangent of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccosh\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic cosine of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsinh\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic sine of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBctanh\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic tangent of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcsech\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic secant of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccsch\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic secant of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBccoth\fP (\fBcomplex\fP z)"
.br
.RI "\fIHyperbolic cotangent of a complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacosh\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic cosine of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcasinh\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic sine of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcatanh\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic tangent of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcasech\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic secant of complex numbers\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacsch\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic cosecant of complex number\&. \fP"
.ti -1c
.RI "\fBcomplex\fP \fBcacoth\fP (\fBcomplex\fP z)"
.br
.RI "\fIInverse hyperbolic cotangent of complex number\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions in math library for handling complex numbers\&. 


.PP
Definition in file \fBcomplex\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "double cabs (\fBcomplex\fP z)"

.PP
Absolute value of complex number\&. 
.PP
Definition at line 56 of file prim\&.c\&.
.PP
References cimag(), creal(), and hypot()\&.
.PP
Referenced by ComplexNumber::Absolute(), clog(), cpow(), and csqrt()\&.
.PP
.nf
57 {
58     return hypot(creal(z), cimag(z));
59 }
.fi
.SS "\fBcomplex\fP cacos (\fBcomplex\fP z)"

.PP
Inverse cosine of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
14/09/15
.RE
.PP
Inverse cosine expressed using complex logarithms: 
.PP
.nf

arccos z = -i * log(z + i * sqrt(1 - z * z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file cacos\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcCosine()\&.
.PP
.nf
44 {
45     complex a = cpack(1\&.0, 0\&.0);
46     complex i = cpack(0\&.0, 1\&.0);
47     complex j = cpack(0\&.0, -1\&.0);
48     complex p = csub(a, cmul(z, z));
49     complex q = clog(cadd(z, cmul(i, csqrt(p))));
50     complex w = cmul(j, q);
51     return w;
52 }
.fi
.SS "\fBcomplex\fP cacosh (\fBcomplex\fP z)"

.PP
Inverse hyperbolic cosine of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
15/03/03
.RE
.PP
Inverse hyperbolic cosine expressed using complex logarithms: 
.PP
.nf

acosh(z) = log(z + sqrt(z*z - 1))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 43 of file cacosh\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::HypArcCosine()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex a = csub(cmul(z, z) , one);
47     complex b = cadd(z, csqrt(a));
48     complex w = clog(b);
49     return w;
50 }
.fi
.SS "\fBcomplex\fP cacot (\fBcomplex\fP z)"

.PP
Inverse cotangent of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
14/10/01
.RE
.PP
Inverse cotangent expressed using complex logarithms: 
.PP
.nf

arccot z = i/2 * (log(1 - i/z) - log(1 + i/z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file cacot\&.c\&.
.PP
References cadd(), cdiv(), clog(), cmul(), cpack(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcCotangent()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex two = cpack(2\&.0, 0\&.0);
47     complex i = cpack(0\&.0, 1\&.0);
48     complex iz = cdiv(i, z);
49     complex p = clog(csub(one, iz));
50     complex q = clog(cadd(one, iz));
51     complex w = cmul(cdiv(i, two), csub(p, q));
52     return w;
53 }
.fi
.SS "\fBcomplex\fP cacoth (\fBcomplex\fP z)"

.PP
Inverse hyperbolic cotangent of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
14/09/15
.RE
.PP
Inverse hyperbolic cotangent expressed using complex logarithms: 
.PP
.nf

acoth(z) = 1/2 * ((log(z + 1) - log(z - 1))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 43 of file cacoth\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), and csub()\&.
.PP
Referenced by ComplexNumber::HypArcCotangent()\&.
.PP
.nf
44 {
45     complex half = cpack(0\&.5, 0\&.0);
46     complex one = cpack(1\&.0, 0\&.0);
47     complex a = clog(cadd(z, one));
48     complex b = clog(csub(z, one));
49     complex c = csub(a, b);
50     complex w = cmul(half, c);
51     return w;
52 }
.fi
.SS "\fBcomplex\fP cacsc (\fBcomplex\fP z)"

.PP
Inverse cosecant of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
14/10/01
.RE
.PP
Inverse cosecant expressed using complex logarithms: 
.PP
.nf

arccsc z = -i * log(sqr(1 - 1/(z*z)) + i/z)
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file cacsc\&.c\&.
.PP
References cadd(), cdiv(), clog(), cmul(), cpack(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcCosecant()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex i = cpack(0\&.0, 1\&.0);
47     complex j = cpack(0\&.0, -1\&.0);
48     complex iz = cdiv(i, z);
49     complex z2 = cmul(z, z);
50     complex p = cdiv(one, z2);
51     complex q = csqrt(csub(one, p));
52     complex w = cmul(j, clog(cadd(q, iz)));
53     return w;
54 }
.fi
.SS "\fBcomplex\fP cacsch (\fBcomplex\fP z)"

.PP
Inverse hyperbolic cosecant of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
14/09/15
.RE
.PP
Inverse hyperbolic cosecant expressed using complex logarithms: 
.PP
.nf

acsch(z) = log(sqrt(1 + 1 / (z * z)) + 1/z)
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 43 of file cacsch\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), creci(), and csqrt()\&.
.PP
Referenced by ComplexNumber::HypArcCosecant()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex a = creci(cmul(z, z));
47     complex b = csqrt(cadd(one, a));
48     complex c = cadd(b, creci(z));
49     complex w = clog(c);
50     return w;
51 }
.fi
.SS "\fBcomplex\fP cadd (\fBcomplex\fP a, \fBcomplex\fP z)"

.PP
Addition of two complex numbers\&. 
.PP
Definition at line 128 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Add(), cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), catan(), and catanh()\&.
.PP
.nf
129 {
130     complex w;
131     w = cpack(creal(y) + creal(z), cimag(y) + cimag(z));
132     return w;
133 }
.fi
.SS "double carg (\fBcomplex\fP z)"

.SS "\fBcomplex\fP casec (\fBcomplex\fP z)"

.PP
Inverse secant expressed using complex logarithms: 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
14/10/01
.RE
.PP
Inverse secant expressed using complex logarithms: 
.PP
.nf

arcsec z = -i * log(i * sqr(1 - 1/(z*z)) + 1/z)
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file casec\&.c\&.
.PP
References cadd(), cdiv(), clog(), cmul(), cpack(), creci(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcSecant()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex i = cpack(0\&.0, 1\&.0);
47     complex j = cpack(0\&.0, -1\&.0);
48     complex rz = creci(z);
49     complex z2 = cmul(z, z);
50     complex p = cdiv(one, z2);
51     complex q = csqrt(csub(one, p));
52     complex w = cmul(j, clog(cadd(cmul(i, q), rz)));
53     return w;
54 }
.fi
.SS "\fBcomplex\fP casech (\fBcomplex\fP z)"

.PP
Inverse hyperbolic secant of complex numbers\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
15/03/03
.RE
.PP
Inverse hyperbolic secant expressed using complex logarithms: 
.PP
.nf

asech(z) = log(sqrt(1 / (z * z) - 1) + 1/z)
.fi
.PP
.PP
.PP
.nf
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 44 of file casech\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), creci(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::HypArcSecant()\&.
.PP
.nf
45 {
46     complex one = cpack(1\&.0, 0\&.0);
47     complex a = creci(cmul(z, z));
48     complex b = csqrt(csub(a, one));
49     complex c = cadd(b, creci(z));
50     complex w = clog(c);
51     return w;
52 }
.fi
.SS "\fBcomplex\fP casin (\fBcomplex\fP z)"

.PP
Inverse sine of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
14/10/01
.RE
.PP
Inverse sine expressed using complex logarithms: 
.PP
.nf

arcsin z = -i * log(iz + sqrt(1 - z*z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file casin\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), csqrt(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcSine()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex i = cpack(0\&.0, 1\&.0);
47     complex j = cpack(0\&.0, -1\&.0);
48     complex iz = cmul(i, z);
49     complex z2 = cmul(z, z);
50     complex p = csqrt(csub(one, z2));
51     complex q = clog(cadd(iz, p));
52     complex w = cmul(j, q);
53     return w;
54 }
.fi
.SS "\fBcomplex\fP casinh (\fBcomplex\fP z)"

.PP
Inverse hyperbolic sine of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
14/09/15
.RE
.PP
Inverse hyperbolic sine expressed using complex logarithms: 
.PP
.nf

asinh(z) = log(z + sqrt(z*z + 1))
.fi
.PP
.PP
.PP
.nf
With branch cuts: -i INF to -i and i to i INF
.fi
.PP
.PP
.PP
.nf
Domain: -INF to INF
Range:  -INF to INF
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 48 of file casinh\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), and csqrt()\&.
.PP
Referenced by ComplexNumber::HypArcSine()\&.
.PP
.nf
49 {
50     complex one = cpack(1\&.0, 0\&.0);
51     complex a = cadd(cmul(z, z), one);
52     complex b = cadd(z, csqrt(a));
53     complex w = clog(b);
54     return w;
55 }
.fi
.SS "\fBcomplex\fP catan (\fBcomplex\fP z)"

.PP
Inverse tangent of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
14/10/01
.RE
.PP
Inverse tangent expressed using complex logarithms: 
.PP
.nf

atan(z) = i/2 * (log(1 - i * z) - log(1 + i * z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms 
.PP
Definition at line 43 of file catan\&.c\&.
.PP
References cadd(), cdiv(), clog(), cmul(), cpack(), and csub()\&.
.PP
Referenced by ComplexNumber::ArcTangent()\&.
.PP
.nf
44 {
45     complex one = cpack(1\&.0, 0\&.0);
46     complex two = cpack(2\&.0, 0\&.0);
47     complex i = cpack(0\&.0, 1\&.0);
48     complex iz = cmul(i, z);
49     complex p = clog(csub(one, iz));
50     complex q = clog(cadd(one, iz));
51     complex w = cmul(cdiv(i, two), csub(p, q));
52     return w;
53 }
.fi
.SS "\fBcomplex\fP catanh (\fBcomplex\fP z)"

.PP
Inverse hyperbolic tangent of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
14/09/15
.RE
.PP
Inverse hyperbolic tangent expressed using complex logarithms: 
.PP
.nf

atanh(z) = 1/2 * ((log(1 + z) - log(1 - z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Inverse_hyperbolic_function#Logarithmic_representation 
.PP
Definition at line 43 of file catanh\&.c\&.
.PP
References cadd(), clog(), cmul(), cpack(), and csub()\&.
.PP
Referenced by ComplexNumber::HypArcTangent()\&.
.PP
.nf
44 {
45     complex half = cpack(0\&.5, 0\&.0);
46     complex one = cpack(1\&.0, 0\&.0);
47     complex a = clog(cadd(one, z));
48     complex b = clog(csub(one, z));
49     complex c = csub(a, b);
50     complex w = cmul(half, c);
51     return w;
52 }
.fi
.SS "\fBcomplex\fP ccbrt (\fBcomplex\fP z)"

.PP
Cube root of complex number\&. 
.PP
.nf

cbrt z = exp(1/3 * log(z))
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Cube_root 
.PP
Definition at line 40 of file ccbrt\&.c\&.
.PP
References cexp(), clog(), cmul(), and cpack()\&.
.PP
Referenced by ComplexNumber::CubeRoot()\&.
.PP
.nf
41 {
42     complex onethird = cpack(1\&.0 / 3\&.0, 0\&.0);
43     complex a = cmul(onethird, clog(z));
44     complex w = cexp(a);
45     return w;
46 }
.fi
.SS "\fBcomplex\fP cceil (\fBcomplex\fP z)"

.PP
Ceiling value of complex number\&. 
.PP
Definition at line 106 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Ceiling()\&.
.PP
.nf
107 {
108     complex w;
109     w = cpack(ceil(creal(z)), ceil(cimag(z)));
110     return w;
111 }
.fi
.SS "\fBcomplex\fP ccos (\fBcomplex\fP z)"

.PP
Cosine of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
.PP
.nf

a+bi
real =  cos(a) * cosh(b)
imag = -sin(a) * sinh(b)
.fi
.PP
 
.PP
Definition at line 51 of file ccos\&.c\&.
.PP
References cchsh(), cimag(), cos(), cpack(), creal(), and sin()\&.
.PP
Referenced by ComplexNumber::Cosine()\&.
.PP
.nf
52 {
53     complex w;
54     double a, b;
55     double ch, sh;
56 
57     a = creal(z);
58     b = cimag(z);
59     cchsh(b, &ch, &sh);
60     w = cpack((cos(a) * ch), (-sin(a) * sh));
61 
62     return w;
63 }
.fi
.SS "\fBcomplex\fP ccosh (\fBcomplex\fP z)"

.PP
Hyperbolic cosine of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
.PP
.nf

a+bi
real = cosh(a) * cos(b)
imag = sinh(a) * sin(b)
.fi
.PP
 
.PP
Definition at line 51 of file ccosh\&.c\&.
.PP
References cchsh(), cimag(), cos(), cpack(), creal(), and sin()\&.
.PP
Referenced by ComplexNumber::HypCosine()\&.
.PP
.nf
52 {
53     complex w;
54     double a, b;
55     double ch, sh;
56 
57     a = creal(z);
58     b = cimag(z);
59     cchsh(a, &ch, &sh);
60     w = cpack(cos(b) * ch, sin(b) * sh);
61 
62     return w;
63 }
.fi
.SS "\fBcomplex\fP ccot (\fBcomplex\fP z)"

.PP
Cotangent of a complex number\&. Calculated as in Open Office: 
.PP
.nf

a+bi
                sin(2\&.0 * a)
real  = ------------------------------
         cosh(2\&.0 * b) - cos(2\&.0 * a)
.fi
.PP
.PP
.PP
.nf
               -sinh(2\&.0 * b)
imag  = ------------------------------
         cosh(2\&.0 * b) - cos(2\&.0 * a)
.fi
.PP
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMCOT_function 
.PP
Definition at line 47 of file ccot\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::Cotangent()\&.
.PP
.nf
48 {
49     complex w;
50     double a, b;
51     double d;
52 
53     a = creal(z);
54     b = cimag(z);
55     d = cosh(2\&.0 * b) - cos(2\&.0 * a);
56 
57     if (d == 0\&.0) {
58         w = cpack(HUGE, HUGE); // TODO: INF, INF
59     } else {
60         w = cpack((sin(2\&.0 * a) / d), (-sinh(2\&.0 * b) / d));
61     }
62 
63     return w;
64 }
.fi
.SS "\fBcomplex\fP ccoth (\fBcomplex\fP z)"

.PP
Hyperbolic cotangent of a complex number\&. 
.PP
.nf

acoth(z) = 0\&.5 * (log(1 + 1/z) - log(1 - 1/z))
.fi
.PP
 or 
.PP
.nf

a+bi
               sinh(2\&.0 * a)
real  = ------------------------------
         cosh(2\&.0 * a) - cos(2\&.0 * b)
.PP
.nf
  -sin(2.0 * b)
.fi
.PP

imag  = ------------------------------
         cosh(2\&.0 * a) - cos(2\&.0 * b)
.fi
.PP
 
.PP
Definition at line 49 of file ccoth\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::HypCotangent()\&.
.PP
.nf
50 {
51     complex w;
52     double a, b;
53     double d;
54 
55     a = creal(z);
56     b = cimag(z);
57     d = cosh(2\&.0 * a) - cos(2\&.0 * b);
58     w = cpack(sinh(2\&.0 * a) / d, -sin(2\&.0 * b) / d);
59 
60     return w;
61 }
.fi
.SS "\fBcomplex\fP ccsc (\fBcomplex\fP z)"

.PP
Cosecant of a complex number\&. Calculated as in Open Office: 
.PP
.nf

a+bi
            2\&.0 * sin(a) * cosh(b)
real  = ------------------------------
         cosh(2\&.0 * b) - cos(2\&.0 * a)
.fi
.PP
.PP
.PP
.nf
           -2\&.0 * cos(a) * sinh(b)
imag  = ------------------------------
         cosh(2\&.0 * b) - cos(2\&.0 * a)
.fi
.PP
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMCSC_function 
.PP
Definition at line 47 of file ccsc\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::Cosecant()\&.
.PP
.nf
48 {
49     complex w;
50     double a, b;
51     double d;
52 
53     a = creal(z);
54     b = cimag(z);
55     d = cosh(2\&.0 * b) - cos(2\&.0 * a);
56 
57     if (d == 0\&.0) {
58         w = cpack(HUGE, HUGE); // TODO: INF, INF
59     } else {
60         w = cpack((2\&.0 * sin(a) * cosh(b) / d), (-2\&.0 * cos(a) * sinh(b) / d));
61     }
62 
63     return w;
64 }
.fi
.SS "\fBcomplex\fP ccsch (\fBcomplex\fP z)"

.PP
Hyperbolic secant of a complex number\&. Calculated as in Open Office: 
.PP
.nf

a+bi
            2\&.0 * sinh(a) * cos(b)
real  = ------------------------------
         cosh(2\&.0 * a) - cos(2\&.0 * b)
.fi
.PP
.PP
.PP
.nf
        -2\&.0 * cosh(2\&.0 * a) * sin(b)
imag  = ------------------------------
         cosh(2\&.0 * a) - cos(2\&.0 * b)
.fi
.PP
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMCSCH_function 
.PP
Definition at line 47 of file ccsch\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::HypCosecant()\&.
.PP
.nf
48 {
49     complex w;
50     double a, b;
51     double d;
52 
53     a = creal(z);
54     b = cimag(z);
55     d = cosh(2\&.0 * a) - cos(2\&.0 * b);
56     w = cpack((2\&.0 * sinh(a) * cos(b) / d), (-2\&.0 * cosh(a) * sin(b) / d));
57 
58     return w;
59 }
.fi
.SS "\fBcomplex\fP cdiv (\fBcomplex\fP a, \fBcomplex\fP z)"

.PP
Division of two complex numbers\&. 
.PP
Definition at line 170 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacot(), cacsc(), casec(), catan(), clog10(), clogb(), and ComplexNumber::Div()\&.
.PP
.nf
171 {
172     complex w;
173     double a, b, c, d;
174     double q, v, x;
175 
176     a = creal(y);
177     b = cimag(y);
178     c = creal(z);
179     d = cimag(z);
180 
181     q = c * c + d * d;
182     v = a * c + b * d;
183     x = b * c - a * d;
184 
185     w = cpack(v / q, x / q);
186     return w;
187 }
.fi
.SS "\fBcomplex\fP cexp (\fBcomplex\fP z)"

.PP
Returns e to the power of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20 
.RE
.PP

.PP
Definition at line 46 of file cexp\&.c\&.
.PP
References cimag(), cos(), cpack(), creal(), exp(), and sin()\&.
.PP
Referenced by ccbrt()\&.
.PP
.nf
47 {
48     complex w;
49     double r, x, y;
50     x = creal(z);
51     y = cimag(z);
52     r = exp(x);
53     w = cpack(r * cos(y), r * sin(y));
54     return w;
55 }
.fi
.SS "\fBcomplex\fP cfloor (\fBcomplex\fP z)"

.PP
Floor value of complex number\&. 
.PP
Definition at line 95 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by ComplexNumber::Floor()\&.
.PP
.nf
96 {
97     complex w;
98     w = cpack(floor(creal(z)), floor(cimag(z)));
99     return w;
100 }
.fi
.SS "double cimag (\fBcomplex\fP z)"

.PP
Imaginary part of complex number\&. 
.PP
Definition at line 47 of file prim\&.c\&.
.PP
Referenced by cabs(), cadd(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), cmul(), cpow(), creci(), cround(), csec(), csech(), csgn(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::GetDefaultPrecedence(), ComplexNumber::GetImagValue(), ComplexNumber::GetPrecedence(), PositionalNumeralSystem::GetText(), DecimalSystem::GetText(), and ComplexNumber::Unary()\&.
.PP
.nf
48 {
49     return (IMAG_PART(z));
50 }
.fi
.SS "\fBcomplex\fP clog (\fBcomplex\fP z)"

.PP
Natural logarithm of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20 
.RE
.PP

.PP
Definition at line 46 of file clog\&.c\&.
.PP
References atan2(), cabs(), cimag(), cpack(), and creal()\&.
.PP
Referenced by cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), catan(), catanh(), ccbrt(), clog10(), clogb(), and ComplexNumber::Log()\&.
.PP
.nf
47 {
48     complex w;
49     double p, q;
50     p = log(cabs(z));
51     q = atan2(cimag(z), creal(z));
52     w = cpack(p, q);
53     return w;
54 }
.fi
.SS "\fBcomplex\fP clog10 (\fBcomplex\fP z)"

.PP
Base 10 logarithmic value of complex number\&. 
.PP
.nf

log z = log(z) / log(10)
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Complex_logarithm 
.PP
Definition at line 39 of file clog10\&.c\&.
.PP
References cdiv(), clog(), and cpack()\&.
.PP
Referenced by ComplexNumber::Log10()\&.
.PP
.nf
40 {
41     complex teen = cpack(10\&.0, 0\&.0);
42     complex w = cdiv(clog(z), clog(teen));
43     return w;
44 }
.fi
.SS "\fBcomplex\fP clogb (\fBcomplex\fP z)"

.PP
Base 2 logarithmic value of complex number\&. 
.PP
.nf

lb z = log(z) / log(2)
.fi
.PP
 More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Complex_logarithm 
.PP
Definition at line 39 of file clogb\&.c\&.
.PP
References cdiv(), clog(), and cpack()\&.
.PP
Referenced by ComplexNumber::Log2()\&.
.PP
.nf
40 {
41     complex two = cpack(2\&.0, 0\&.0);
42     complex w = cdiv(clog(z), clog(two));
43     return w;
44 }
.fi
.SS "\fBcomplex\fP cmul (\fBcomplex\fP a, \fBcomplex\fP z)"

.PP
Multiplication of two complex numbers\&. 
.PP
Definition at line 150 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), catan(), catanh(), ccbrt(), and ComplexNumber::Mul()\&.
.PP
.nf
151 {
152     complex w;
153     double a, b, c, d;
154 
155     // (a+bi)(c+di)
156     a = creal(y);
157     b = cimag(y);
158     c = creal(z);
159     d = cimag(z);
160 
161     // (ac -bd) + (ad + bc)i
162     w = cpack(a * c - b * d, a * d + b * c);
163     return w;
164 }
.fi
.SS "\fBcomplex\fP conj (\fBcomplex\fP z)"

.PP
Definition at line 61 of file prim\&.c\&.
.PP
References cpack()\&.
.PP
Referenced by creci()\&.
.PP
.nf
62 {
63     IMAG_PART(z) = -IMAG_PART(z);
64     return cpack(REAL_PART(z), IMAG_PART(z));
65 }
.fi
.SS "\fBcomplex\fP cpack (double x, double y)"

.PP
Pack two real numbers into a complex number\&. 
.PP
Definition at line 71 of file prim\&.c\&.
.PP
Referenced by ComplexNumber::Add(), cacos(), cacosh(), cacot(), cacoth(), cacsc(), cacsch(), cadd(), casec(), casech(), casin(), casinh(), catan(), catanh(), ccbrt(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), clog10(), clogb(), cmul(), ComplexNumber::ComplexNumber(), conj(), cpow(), creci(), cround(), csec(), csech(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::Div(), ComplexNumber::Mul(), ComplexNumber::Raise(), ComplexNumber::Sub(), and ComplexNumber::Unary()\&.
.PP
.nf
72 {
73     complex z;
74 
75     REAL_PART(z) = x;
76     IMAG_PART(z) = y;
77     return (z);
78 }
.fi
.SS "\fBcomplex\fP cpow (\fBcomplex\fP a, \fBcomplex\fP z)"

.PP
Complex number raised to a power\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20 
.RE
.PP

.PP
Definition at line 46 of file cpow\&.c\&.
.PP
References atan2(), cabs(), cimag(), cos(), cpack(), creal(), exp(), pow(), and sin()\&.
.PP
Referenced by ComplexNumber::Raise()\&.
.PP
.nf
47 {
48     complex w;
49     double x, y, r, theta, absa, arga;
50 
51     x = creal(z);
52     y = cimag(z);
53     absa = cabs(a);
54     if (absa == 0\&.0) {
55         return cpack(0\&.0, + 0\&.0);
56     }
57     arga = atan2(cimag(a), creal(a));
58 
59     r = pow(absa, x);
60     theta = x * arga;
61     if (y != 0\&.0) {
62         r = r * exp(-y * arga);
63         theta = theta + y * log(absa);
64     }
65 
66     w = cpack(r * cos(theta), r * sin(theta));
67     return w;
68 }
.fi
.SS "\fBcomplex\fP cproj (\fBcomplex\fP z)"

.SS "double creal (\fBcomplex\fP z)"

.PP
Real part of complex number\&. 
.PP
Definition at line 38 of file prim\&.c\&.
.PP
Referenced by cabs(), cadd(), cceil(), ccos(), ccosh(), ccot(), ccoth(), ccsc(), ccsch(), cdiv(), cexp(), cfloor(), clog(), cmul(), cpow(), creci(), cround(), csec(), csech(), csgn(), csin(), csinh(), csqrt(), csub(), ctan(), ctanh(), ctrunc(), ComplexNumber::GetDefaultPrecedence(), ComplexNumber::GetIntegerValue(), ComplexNumber::GetPrecedence(), ComplexNumber::GetRealValue(), PositionalNumeralSystem::GetText(), DecimalSystem::GetText(), ComplexNumber::PureComplexValue(), and ComplexNumber::Unary()\&.
.PP
.nf
39 {
40     return (REAL_PART(z));
41 }
.fi
.SS "\fBcomplex\fP creci (\fBcomplex\fP z)"

.PP
Reciprocal value of complex number\&. 
.PP
Definition at line 193 of file prim\&.c\&.
.PP
References cimag(), conj(), cpack(), and creal()\&.
.PP
Referenced by cacsch(), casec(), casech(), and ComplexNumber::Reciprocal()\&.
.PP
.nf
194 {
195     complex w;
196     double q, a, b;
197 
198     a = creal(z);
199     b = cimag(conj(z));
200     q = a * a + b * b;
201     w = cpack(a / q, b / q);
202 
203     return w;
204 }
.fi
.SS "\fBcomplex\fP cround (\fBcomplex\fP z)"

.PP
Division of two complex numbers\&. 
.PP
Definition at line 117 of file prim\&.c\&.
.PP
References cimag(), cpack(), creal(), and round()\&.
.PP
Referenced by ComplexNumber::Round()\&.
.PP
.nf
118 {
119     complex w;
120     w = cpack(round(creal(z)), round(cimag(z)));
121     return w;
122 }
.fi
.SS "\fBcomplex\fP csec (\fBcomplex\fP z)"

.PP
Secant of a complex number\&. Calculated as in Open Office:
.br
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMSEC_function 
.PP
.nf

a+bi
            2\&.0 * cos(a) * cosh(b)
real  = ------------------------------
         cosh(2\&.0 * b) + cos(2\&.0 * a)
.fi
.PP
.PP
.PP
.nf
            2\&.0 * sin(a) * sinh(b)
imag  = ------------------------------
         cosh(2\&.0 * b) + cos(2\&.0 * a)
.fi
.PP
 
.PP
Definition at line 47 of file csec\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::Secant()\&.
.PP
.nf
48 {
49     complex w;
50     double a, b;
51     double d;
52 
53     a = creal(z);
54     b = cimag(z);
55     d = cosh(2\&.0 * b) + cos(2\&.0 * a);
56 
57     if (d == 0\&.0) {
58         w = cpack(HUGE, HUGE); // TODO: INF, INF
59     } else {
60         w = cpack((2\&.0 * cos(a) * cosh(b) / d), (2\&.0 * sin(a) * sinh(b) / d));
61     }
62 
63     return w;
64 }
.fi
.SS "\fBcomplex\fP csech (\fBcomplex\fP z)"

.PP
Hyperbolic secant of a complex number\&. Calculated as in Open Office:
.br
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMSECH_function 
.PP
.nf

a+bi
            2\&.0 * cosh(a) * cos(b)
real  = ------------------------------
         cosh(2\&.0 * a) + cos(2\&.0 * b)
.fi
.PP
.PP
.PP
.nf
        -2\&.0 * sinh(2\&.0 * a) * sin(b)
imag  = ------------------------------
         cosh(2\&.0 * a) + cos(2\&.0 * b)
.fi
.PP
 
.PP
Definition at line 47 of file csech\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::HypSecant()\&.
.PP
.nf
48 {
49     complex w;
50     double a, b;
51     double d;
52 
53     a = creal(z);
54     b = cimag(z);
55     d = cosh(2\&.0 * a) + cos(2\&.0 * b);
56     w = cpack((2\&.0 * cosh(a) * cos(b) / d), (-2\&.0 * sinh(a) * sin(b) / d));
57 
58     return w;
59 }
.fi
.SS "double csgn (\fBcomplex\fP z)"

.PP
Complex signum\&. Mostly as specified in IEEE Std 1003\&.1, 2013 Edition http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/complex.h.html
.PP
More info is available at Wikipedia: 
.br
 http://en.wikipedia.org/wiki/Sign_function#Complex_signum 
.PP
Definition at line 36 of file csgn\&.c\&.
.PP
References cimag(), and creal()\&.
.PP
Referenced by ComplexNumber::Signum()\&.
.PP
.nf
37 {
38     double a = creal(z);
39 
40     if (a > 0\&.0) {
41         return 1\&.0;
42     } else if (a < 0\&.0) {
43         return -1\&.0;
44     } else {
45         double b = cimag(z);
46         return b > 0\&.0 ? 1\&.0 : b < 0\&.0 ? -1\&.0 : 0\&.0;
47     }
48 }
.fi
.SS "\fBcomplex\fP csin (\fBcomplex\fP z)"

.PP
Sine of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
Calculated according to description at wikipedia:
.br
 http://en.wikipedia.org/wiki/Sine#Sine_with_a_complex_argument 
.PP
.nf

a+bi
real = sin(a) * cosh(b)
imag = cos(a) * sinh(b)
.fi
.PP
 
.PP
Definition at line 53 of file csin\&.c\&.
.PP
References cchsh(), cimag(), cos(), cpack(), creal(), and sin()\&.
.PP
Referenced by ComplexNumber::Sine()\&.
.PP
.nf
54 {
55     complex w;
56     double a, b;
57     double ch, sh;
58 
59     a = creal(z);
60     b = cimag(z);
61     cchsh(b, &ch, &sh);
62     w = cpack((sin(a) * ch), (cos(a) * sh));
63 
64     return w;
65 }
.fi
.SS "\fBcomplex\fP csinh (\fBcomplex\fP z)"

.PP
Hyperbolic sine of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
Calculated as in Open Office:
.br
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMSINH_function 
.PP
.nf

a+bi
real = sinh(a) * cos(b)
imag = cosh(a) * sin(b)
.fi
.PP
 
.PP
Definition at line 53 of file csinh\&.c\&.
.PP
References cchsh(), cimag(), cos(), cpack(), creal(), and sin()\&.
.PP
Referenced by ComplexNumber::HypSine()\&.
.PP
.nf
54 {
55     complex w;
56     double a, b;
57     double ch, sh;
58 
59     a = creal(z);
60     b = cimag(z);
61     cchsh(a, &ch, &sh);
62     w = cpack(cos(b) * sh, sin(b) * ch);
63 
64     return w;
65 }
.fi
.SS "\fBcomplex\fP csqrt (\fBcomplex\fP z)"

.PP
Square root of complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20 
.RE
.PP

.PP
Definition at line 46 of file csqrt\&.c\&.
.PP
References cabs(), cimag(), cpack(), creal(), and sqrt()\&.
.PP
Referenced by cacos(), cacosh(), cacsc(), cacsch(), casec(), casech(), casin(), casinh(), and ComplexNumber::SquareRoot()\&.
.PP
.nf
47 {
48     complex w;
49     double x, y, r, t, scale;
50 
51     x = creal (z);
52     y = cimag (z);
53 
54     if (y == 0\&.0) {
55         if (x == 0\&.0) {
56             w = cpack(0\&.0, y);
57         } else {
58             r = fabs(x);
59             r = sqrt(r);
60             if (x < 0\&.0) {
61                 w = cpack(0\&.0, r);
62             } else {
63                 w = cpack(r, y);
64             }
65         }
66         return w;
67     }
68     if (x == 0\&.0) {
69         r = fabs(y);
70         r = sqrt(0\&.5 * r);
71         if (y > 0)
72             w =  cpack(r, r);
73         else
74             w = cpack(r, -r);
75         return w;
76     }
77     /* Rescale to avoid internal overflow or underflow\&.  */
78     if ((fabs(x) > 4\&.0) || (fabs(y) > 4\&.0)) {
79         x *= 0\&.25;
80         y *= 0\&.25;
81         scale = 2\&.0;
82     } else {
83 #if 1
84         x *= 1\&.8014398509481984e16;  /* 2^54 */
85         y *= 1\&.8014398509481984e16;
86         scale = 7\&.450580596923828125e-9; /* 2^-27 */
87 #else
88         x *= 4\&.0;
89         y *= 4\&.0;
90         scale = 0\&.5;
91 #endif
92     }
93     w = cpack(x, y);
94     r = cabs(w);
95     if (x > 0) {
96         t = sqrt(0\&.5 * r + 0\&.5 * x);
97         r = scale * fabs((0\&.5 * y) / t );
98         t *= scale;
99     } else {
100         r = sqrt(0\&.5 * r - 0\&.5 * x);
101         t = scale * fabs((0\&.5 * y) / r);
102         r *= scale;
103     }
104     if (y < 0)
105         w = cpack(t, -r);
106     else
107         w = cpack(t, r);
108     return w;
109 }
.fi
.SS "\fBcomplex\fP csub (\fBcomplex\fP a, \fBcomplex\fP z)"

.PP
Subtraction of two complex numbers\&. 
.PP
Definition at line 139 of file prim\&.c\&.
.PP
References cimag(), cpack(), and creal()\&.
.PP
Referenced by cacos(), cacosh(), cacot(), cacoth(), cacsc(), casec(), casech(), casin(), catan(), catanh(), and ComplexNumber::Sub()\&.
.PP
.nf
140 {
141     complex w;
142     w = cpack(creal(y) - creal(z), cimag(y) - cimag(z));
143     return w;
144 }
.fi
.SS "\fBcomplex\fP ctan (\fBcomplex\fP z)"

.PP
Tangent of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
Calculated as in Open Office:
.br
 https://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_IMTAN_function 
.PP
.nf

a+bi
               sin(2\&.0 * a)
real  = ------------------------------
         cos(2\&.0 * a) + cosh(2\&.0 * b)
.PP
.nf
  sinh(2.0 * b)
.fi
.PP

imag  = ------------------------------
         cos(2\&.0 * a) + cosh(2\&.0 * b)
.fi
.PP
 
.PP
Definition at line 58 of file ctan\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::Tangent()\&.
.PP
.nf
59 {
60     complex w;
61     double a, b;
62     double d;
63 
64     a = creal(z);
65     b = cimag(z);
66     d = cos(2\&.0 * a) + cosh(2\&.0 * b);
67 
68     if (d == 0\&.0) {
69         w = cpack(HUGE, HUGE); // TODO: INF, INF
70     } else {
71         w = cpack((sin(2\&.0 * a) / d), (sinh(2\&.0 * b) / d));
72     }
73 
74     return w;
75 }
.fi
.SS "\fBcomplex\fP ctanh (\fBcomplex\fP z)"

.PP
Hyperbolic tangent of a complex number\&. 
.PP
\fBVersion:\fP
.RS 4
1\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2007/08/20
.RE
.PP
.PP
.nf

a+bi
               sinh(2\&.0 * a)
real  = ------------------------------
         cosh(2\&.0 * a) + cos(2\&.0 * b)
.PP
.nf
  sin(2.0 * b)
.fi
.PP

imag  = ------------------------------
         cosh(2\&.0 * a) + cos(2\&.0 * b)
.fi
.PP
 
.PP
Definition at line 56 of file ctanh\&.c\&.
.PP
References cimag(), cos(), cosh(), cpack(), creal(), sin(), and sinh()\&.
.PP
Referenced by ComplexNumber::HypTangent()\&.
.PP
.nf
57 {
58     complex w;
59     double a, b;
60     double d;
61 
62     a = creal(z);
63     b = cimag(z);
64     d = cosh(2\&.0 * a) + cos(2\&.0 * b);
65     w = cpack((sinh(2\&.0 * a) / d), (sin(2\&.0 * b) / d));
66 
67     return w;
68 }
.fi
.SS "\fBcomplex\fP ctrunc (\fBcomplex\fP z)"

.PP
Truncated value of complex number\&. 
.PP
Definition at line 84 of file prim\&.c\&.
.PP
References cimag(), cpack(), creal(), and trunc()\&.
.PP
Referenced by ComplexNumber::Trunc()\&.
.PP
.nf
85 {
86     complex w;
87     w = cpack(trunc(creal(z)), trunc(cimag(z)));
88     return w;
89 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
