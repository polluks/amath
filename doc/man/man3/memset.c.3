.TH "lib/clib/memset.c" 3 "Sun Jan 22 2017" "Version 1.6.1" "amath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/clib/memset.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'clib\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMemSet\fP (void *dst0, int c0, unsigned int length)"
.br
.RI "\fIFill block of memory with a constant value\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void MemSet (void * dst0, int c0, unsigned int length)"

.PP
Fill block of memory with a constant value\&. 
.PP
Definition at line 53 of file memset\&.c\&.
.PP
.nf
54 {
55     unsigned char *dst = (unsigned char*) dst0;
56     unsigned int  t;
57     unsigned int  c;
58 
59     /*
60      * If not enough words, just fill bytes\&.  A length >= 2 words
61      * guarantees that at least one of them is `complete' after
62      * any necessary alignment\&.  For instance:
63      *
64      *  |-----------|-----------|-----------|
65      *  |00|01|02|03|04|05|06|07|08|09|0A|00|
66      *            ^---------------------^
67      *       dst         dst+length-1
68      *
69      * but we use a minimum of 3 here since the overhead of the code
70      * to do word writes is substantial\&.
71      */
72     if (length < 3 * wsize) {
73         while (length != 0) {
74             *dst++ = c0;
75             --length;
76         }
77     }
78 
79     if ((c = (unsigned char)c0) != 0) { /* Fill the word\&. */
80         c = (c << 8) | c;   /* u_int is 16 bits\&. */
81 #if UINT_MAX > 0xffff
82         c = (c << 16) | c;  /* u_int is 32 bits\&. */
83 #endif
84 #if UINT_MAX > 0xffffffff
85         c = (c << 32) | c;  /* u_int is 64 bits\&. */
86 #endif
87     }
88 
89     /* Align destination by filling in bytes\&. */
90     if ((t = (long)dst & wmask) != 0) {
91         t = wsize - t;
92         length -= t;
93         do {
94             *dst++ = c0;
95         } while (--t != 0);
96     }
97 
98     /* Fill words\&.  Length was >= 2*words so we know t >= 1 here\&. */
99     t = length / wsize;
100     do {
101         *(unsigned int*)dst = c;
102         dst += wsize;
103     } while (--t != 0);
104 
105     /* Mop up trailing bytes, if any\&. */
106     t = length & wmask;
107     if (t != 0)
108         do {
109             *dst++ = c0;
110         } while (--t != 0);
111 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for amath from the source code\&.
